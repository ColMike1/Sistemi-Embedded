
Esercizio__4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002714  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080028ec  080028ec  000038ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028fc  080028fc  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080028fc  080028fc  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080028fc  080028fc  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028fc  080028fc  000038fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002900  08002900  00003900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002904  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  08002910  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08002910  0000407c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b351  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b80  00000000  00000000  0000f38d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  00010f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000958  00000000  00000000  00011b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024cb7  00000000  00000000  00012498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cef2  00000000  00000000  0003714f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f144f  00000000  00000000  00044041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00135490  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003274  00000000  00000000  001354d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00138748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080028d4 	.word	0x080028d4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080028d4 	.word	0x080028d4

08000218 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b088      	sub	sp, #32
 800021c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021e:	f107 030c 	add.w	r3, r7, #12
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
 800022c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800022e:	4b19      	ldr	r3, [pc, #100]	@ (8000294 <MX_GPIO_Init+0x7c>)
 8000230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000232:	4a18      	ldr	r2, [pc, #96]	@ (8000294 <MX_GPIO_Init+0x7c>)
 8000234:	f043 0304 	orr.w	r3, r3, #4
 8000238:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800023a:	4b16      	ldr	r3, [pc, #88]	@ (8000294 <MX_GPIO_Init+0x7c>)
 800023c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800023e:	f003 0304 	and.w	r3, r3, #4
 8000242:	60bb      	str	r3, [r7, #8]
 8000244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000246:	4b13      	ldr	r3, [pc, #76]	@ (8000294 <MX_GPIO_Init+0x7c>)
 8000248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800024a:	4a12      	ldr	r2, [pc, #72]	@ (8000294 <MX_GPIO_Init+0x7c>)
 800024c:	f043 0301 	orr.w	r3, r3, #1
 8000250:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000252:	4b10      	ldr	r3, [pc, #64]	@ (8000294 <MX_GPIO_Init+0x7c>)
 8000254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000256:	f003 0301 	and.w	r3, r3, #1
 800025a:	607b      	str	r3, [r7, #4]
 800025c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 800025e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000262:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000264:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000268:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800026a:	2300      	movs	r3, #0
 800026c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800026e:	f107 030c 	add.w	r3, r7, #12
 8000272:	4619      	mov	r1, r3
 8000274:	4808      	ldr	r0, [pc, #32]	@ (8000298 <MX_GPIO_Init+0x80>)
 8000276:	f000 fb77 	bl	8000968 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800027a:	2200      	movs	r2, #0
 800027c:	2100      	movs	r1, #0
 800027e:	2028      	movs	r0, #40	@ 0x28
 8000280:	f000 fb3d 	bl	80008fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000284:	2028      	movs	r0, #40	@ 0x28
 8000286:	f000 fb54 	bl	8000932 <HAL_NVIC_EnableIRQ>

}
 800028a:	bf00      	nop
 800028c:	3720      	adds	r7, #32
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	40021000 	.word	0x40021000
 8000298:	48000800 	.word	0x48000800

0800029c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002a0:	f000 f9e1 	bl	8000666 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a4:	f000 f80c 	bl	80002c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a8:	f7ff ffb6 	bl	8000218 <MX_GPIO_Init>
  MX_TIM2_Init();
 80002ac:	f000 f900 	bl	80004b0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 80002b0:	2100      	movs	r1, #0
 80002b2:	4802      	ldr	r0, [pc, #8]	@ (80002bc <main+0x20>)
 80002b4:	f001 faf4 	bl	80018a0 <HAL_TIM_OC_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002b8:	bf00      	nop
 80002ba:	e7fd      	b.n	80002b8 <main+0x1c>
 80002bc:	2000002c 	.word	0x2000002c

080002c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b094      	sub	sp, #80	@ 0x50
 80002c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c6:	f107 0318 	add.w	r3, r7, #24
 80002ca:	2238      	movs	r2, #56	@ 0x38
 80002cc:	2100      	movs	r1, #0
 80002ce:	4618      	mov	r0, r3
 80002d0:	f002 fad4 	bl	800287c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]
 80002e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002e2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80002e6:	f000 fcd9 	bl	8000c9c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ea:	2302      	movs	r3, #2
 80002ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002f2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f4:	2340      	movs	r3, #64	@ 0x40
 80002f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002f8:	2300      	movs	r3, #0
 80002fa:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fc:	f107 0318 	add.w	r3, r7, #24
 8000300:	4618      	mov	r0, r3
 8000302:	f000 fd7f 	bl	8000e04 <HAL_RCC_OscConfig>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800030c:	f000 f852 	bl	80003b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000310:	230f      	movs	r3, #15
 8000312:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000314:	2301      	movs	r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000318:	2300      	movs	r3, #0
 800031a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031c:	2300      	movs	r3, #0
 800031e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000320:	2300      	movs	r3, #0
 8000322:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	2100      	movs	r1, #0
 8000328:	4618      	mov	r0, r3
 800032a:	f001 f87d 	bl	8001428 <HAL_RCC_ClockConfig>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000334:	f000 f83e 	bl	80003b4 <Error_Handler>
  }
}
 8000338:	bf00      	nop
 800033a:	3750      	adds	r7, #80	@ 0x50
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}

08000340 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	4603      	mov	r3, r0
 8000348:	80fb      	strh	r3, [r7, #6]
	 * In base allo stato in cui ci si trova, per cambiare l'UEV:
	 * - o si modifica l'AutoReloadRegister ARR (Counter Period),
	 * - o si modifica il Prescaler PSC
	 *
	 * */
	if(GPIO_Pin == Button_Pin){
 800034a:	88fb      	ldrh	r3, [r7, #6]
 800034c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000350:	d125      	bne.n	800039e <HAL_GPIO_EXTI_Callback+0x5e>
		switch(currentState){
 8000352:	4b16      	ldr	r3, [pc, #88]	@ (80003ac <HAL_GPIO_EXTI_Callback+0x6c>)
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b02      	cmp	r3, #2
 8000358:	d018      	beq.n	800038c <HAL_GPIO_EXTI_Callback+0x4c>
 800035a:	2b02      	cmp	r3, #2
 800035c:	dc1f      	bgt.n	800039e <HAL_GPIO_EXTI_Callback+0x5e>
 800035e:	2b00      	cmp	r3, #0
 8000360:	d002      	beq.n	8000368 <HAL_GPIO_EXTI_Callback+0x28>
 8000362:	2b01      	cmp	r3, #1
 8000364:	d009      	beq.n	800037a <HAL_GPIO_EXTI_Callback+0x3a>
			htim2.Instance->PSC = 15999;
			currentState = ONE_HZ;
			break;
		}
	}
}
 8000366:	e01a      	b.n	800039e <HAL_GPIO_EXTI_Callback+0x5e>
			htim2.Instance->PSC = 7999;
 8000368:	4b11      	ldr	r3, [pc, #68]	@ (80003b0 <HAL_GPIO_EXTI_Callback+0x70>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000370:	629a      	str	r2, [r3, #40]	@ 0x28
			currentState = TWO_HZ;
 8000372:	4b0e      	ldr	r3, [pc, #56]	@ (80003ac <HAL_GPIO_EXTI_Callback+0x6c>)
 8000374:	2201      	movs	r2, #1
 8000376:	701a      	strb	r2, [r3, #0]
			break;
 8000378:	e011      	b.n	800039e <HAL_GPIO_EXTI_Callback+0x5e>
			htim2.Instance->PSC = 3999;
 800037a:	4b0d      	ldr	r3, [pc, #52]	@ (80003b0 <HAL_GPIO_EXTI_Callback+0x70>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000382:	629a      	str	r2, [r3, #40]	@ 0x28
			currentState = FOUR_HZ;
 8000384:	4b09      	ldr	r3, [pc, #36]	@ (80003ac <HAL_GPIO_EXTI_Callback+0x6c>)
 8000386:	2202      	movs	r2, #2
 8000388:	701a      	strb	r2, [r3, #0]
			break;
 800038a:	e008      	b.n	800039e <HAL_GPIO_EXTI_Callback+0x5e>
			htim2.Instance->PSC = 15999;
 800038c:	4b08      	ldr	r3, [pc, #32]	@ (80003b0 <HAL_GPIO_EXTI_Callback+0x70>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000394:	629a      	str	r2, [r3, #40]	@ 0x28
			currentState = ONE_HZ;
 8000396:	4b05      	ldr	r3, [pc, #20]	@ (80003ac <HAL_GPIO_EXTI_Callback+0x6c>)
 8000398:	2200      	movs	r2, #0
 800039a:	701a      	strb	r2, [r3, #0]
			break;
 800039c:	bf00      	nop
}
 800039e:	bf00      	nop
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	20000028 	.word	0x20000028
 80003b0:	2000002c 	.word	0x2000002c

080003b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003b8:	b672      	cpsid	i
}
 80003ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003bc:	bf00      	nop
 80003be:	e7fd      	b.n	80003bc <Error_Handler+0x8>

080003c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000404 <HAL_MspInit+0x44>)
 80003c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000404 <HAL_MspInit+0x44>)
 80003cc:	f043 0301 	orr.w	r3, r3, #1
 80003d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80003d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000404 <HAL_MspInit+0x44>)
 80003d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003d6:	f003 0301 	and.w	r3, r3, #1
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003de:	4b09      	ldr	r3, [pc, #36]	@ (8000404 <HAL_MspInit+0x44>)
 80003e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003e2:	4a08      	ldr	r2, [pc, #32]	@ (8000404 <HAL_MspInit+0x44>)
 80003e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80003ea:	4b06      	ldr	r3, [pc, #24]	@ (8000404 <HAL_MspInit+0x44>)
 80003ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003f2:	603b      	str	r3, [r7, #0]
 80003f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80003f6:	f000 fcf5 	bl	8000de4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40021000 	.word	0x40021000

08000408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800040c:	bf00      	nop
 800040e:	e7fd      	b.n	800040c <NMI_Handler+0x4>

08000410 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000414:	bf00      	nop
 8000416:	e7fd      	b.n	8000414 <HardFault_Handler+0x4>

08000418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800041c:	bf00      	nop
 800041e:	e7fd      	b.n	800041c <MemManage_Handler+0x4>

08000420 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000424:	bf00      	nop
 8000426:	e7fd      	b.n	8000424 <BusFault_Handler+0x4>

08000428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800042c:	bf00      	nop
 800042e:	e7fd      	b.n	800042c <UsageFault_Handler+0x4>

08000430 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr

0800043e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800043e:	b480      	push	{r7}
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000442:	bf00      	nop
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr

0800044c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr

0800045a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800045a:	b580      	push	{r7, lr}
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800045e:	f000 f955 	bl	800070c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}
	...

08000468 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800046c:	4802      	ldr	r0, [pc, #8]	@ (8000478 <TIM2_IRQHandler+0x10>)
 800046e:	f001 fb29 	bl	8001ac4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	2000002c 	.word	0x2000002c

0800047c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8000480:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000484:	f000 fbf2 	bl	8000c6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000488:	bf00      	nop
 800048a:	bd80      	pop	{r7, pc}

0800048c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000490:	4b06      	ldr	r3, [pc, #24]	@ (80004ac <SystemInit+0x20>)
 8000492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000496:	4a05      	ldr	r2, [pc, #20]	@ (80004ac <SystemInit+0x20>)
 8000498:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800049c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	e000ed00 	.word	0xe000ed00

080004b0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b08a      	sub	sp, #40	@ 0x28
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b6:	f107 031c 	add.w	r3, r7, #28
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
 80004be:	605a      	str	r2, [r3, #4]
 80004c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004c2:	463b      	mov	r3, r7
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	605a      	str	r2, [r3, #4]
 80004ca:	609a      	str	r2, [r3, #8]
 80004cc:	60da      	str	r2, [r3, #12]
 80004ce:	611a      	str	r2, [r3, #16]
 80004d0:	615a      	str	r2, [r3, #20]
 80004d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004d4:	4b22      	ldr	r3, [pc, #136]	@ (8000560 <MX_TIM2_Init+0xb0>)
 80004d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 80004dc:	4b20      	ldr	r3, [pc, #128]	@ (8000560 <MX_TIM2_Init+0xb0>)
 80004de:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80004e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000560 <MX_TIM2_Init+0xb0>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80004ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000560 <MX_TIM2_Init+0xb0>)
 80004ec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80004f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000560 <MX_TIM2_Init+0xb0>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004f8:	4b19      	ldr	r3, [pc, #100]	@ (8000560 <MX_TIM2_Init+0xb0>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80004fe:	4818      	ldr	r0, [pc, #96]	@ (8000560 <MX_TIM2_Init+0xb0>)
 8000500:	f001 f976 	bl	80017f0 <HAL_TIM_OC_Init>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 800050a:	f7ff ff53 	bl	80003b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800050e:	2300      	movs	r3, #0
 8000510:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000512:	2300      	movs	r3, #0
 8000514:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000516:	f107 031c 	add.w	r3, r7, #28
 800051a:	4619      	mov	r1, r3
 800051c:	4810      	ldr	r0, [pc, #64]	@ (8000560 <MX_TIM2_Init+0xb0>)
 800051e:	f002 f8d1 	bl	80026c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000528:	f7ff ff44 	bl	80003b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800052c:	2330      	movs	r3, #48	@ 0x30
 800052e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000530:	2300      	movs	r3, #0
 8000532:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000534:	2300      	movs	r3, #0
 8000536:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000538:	2300      	movs	r3, #0
 800053a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800053c:	463b      	mov	r3, r7
 800053e:	2200      	movs	r2, #0
 8000540:	4619      	mov	r1, r3
 8000542:	4807      	ldr	r0, [pc, #28]	@ (8000560 <MX_TIM2_Init+0xb0>)
 8000544:	f001 fc0e 	bl	8001d64 <HAL_TIM_OC_ConfigChannel>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800054e:	f7ff ff31 	bl	80003b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000552:	4803      	ldr	r0, [pc, #12]	@ (8000560 <MX_TIM2_Init+0xb0>)
 8000554:	f000 f82a 	bl	80005ac <HAL_TIM_MspPostInit>

}
 8000558:	bf00      	nop
 800055a:	3728      	adds	r7, #40	@ 0x28
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	2000002c 	.word	0x2000002c

08000564 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM2)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000574:	d113      	bne.n	800059e <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000576:	4b0c      	ldr	r3, [pc, #48]	@ (80005a8 <HAL_TIM_OC_MspInit+0x44>)
 8000578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800057a:	4a0b      	ldr	r2, [pc, #44]	@ (80005a8 <HAL_TIM_OC_MspInit+0x44>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	6593      	str	r3, [r2, #88]	@ 0x58
 8000582:	4b09      	ldr	r3, [pc, #36]	@ (80005a8 <HAL_TIM_OC_MspInit+0x44>)
 8000584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	2100      	movs	r1, #0
 8000592:	201c      	movs	r0, #28
 8000594:	f000 f9b3 	bl	80008fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000598:	201c      	movs	r0, #28
 800059a:	f000 f9ca 	bl	8000932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800059e:	bf00      	nop
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40021000 	.word	0x40021000

080005ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80005cc:	d11c      	bne.n	8000608 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ce:	4b10      	ldr	r3, [pc, #64]	@ (8000610 <HAL_TIM_MspPostInit+0x64>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000610 <HAL_TIM_MspPostInit+0x64>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005da:	4b0d      	ldr	r3, [pc, #52]	@ (8000610 <HAL_TIM_MspPostInit+0x64>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = LED_TIM_Pin;
 80005e6:	2320      	movs	r3, #32
 80005e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ea:	2302      	movs	r3, #2
 80005ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80005f6:	2301      	movs	r3, #1
 80005f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_TIM_GPIO_Port, &GPIO_InitStruct);
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	4619      	mov	r1, r3
 8000600:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000604:	f000 f9b0 	bl	8000968 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000608:	bf00      	nop
 800060a:	3720      	adds	r7, #32
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40021000 	.word	0x40021000

08000614 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000614:	480d      	ldr	r0, [pc, #52]	@ (800064c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000616:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000618:	f7ff ff38 	bl	800048c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800061c:	480c      	ldr	r0, [pc, #48]	@ (8000650 <LoopForever+0x6>)
  ldr r1, =_edata
 800061e:	490d      	ldr	r1, [pc, #52]	@ (8000654 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000620:	4a0d      	ldr	r2, [pc, #52]	@ (8000658 <LoopForever+0xe>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000624:	e002      	b.n	800062c <LoopCopyDataInit>

08000626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062a:	3304      	adds	r3, #4

0800062c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800062c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800062e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000630:	d3f9      	bcc.n	8000626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000632:	4a0a      	ldr	r2, [pc, #40]	@ (800065c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000634:	4c0a      	ldr	r4, [pc, #40]	@ (8000660 <LoopForever+0x16>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000638:	e001      	b.n	800063e <LoopFillZerobss>

0800063a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800063c:	3204      	adds	r2, #4

0800063e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800063e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000640:	d3fb      	bcc.n	800063a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000642:	f002 f923 	bl	800288c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000646:	f7ff fe29 	bl	800029c <main>

0800064a <LoopForever>:

LoopForever:
    b LoopForever
 800064a:	e7fe      	b.n	800064a <LoopForever>
  ldr   r0, =_estack
 800064c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000654:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000658:	08002904 	.word	0x08002904
  ldr r2, =_sbss
 800065c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000660:	2000007c 	.word	0x2000007c

08000664 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000664:	e7fe      	b.n	8000664 <ADC1_2_IRQHandler>

08000666 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	b082      	sub	sp, #8
 800066a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800066c:	2300      	movs	r3, #0
 800066e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000670:	2003      	movs	r0, #3
 8000672:	f000 f939 	bl	80008e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000676:	200f      	movs	r0, #15
 8000678:	f000 f80e 	bl	8000698 <HAL_InitTick>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d002      	beq.n	8000688 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000682:	2301      	movs	r3, #1
 8000684:	71fb      	strb	r3, [r7, #7]
 8000686:	e001      	b.n	800068c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000688:	f7ff fe9a 	bl	80003c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800068c:	79fb      	ldrb	r3, [r7, #7]

}
 800068e:	4618      	mov	r0, r3
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006a0:	2300      	movs	r3, #0
 80006a2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80006a4:	4b16      	ldr	r3, [pc, #88]	@ (8000700 <HAL_InitTick+0x68>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d022      	beq.n	80006f2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80006ac:	4b15      	ldr	r3, [pc, #84]	@ (8000704 <HAL_InitTick+0x6c>)
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	4b13      	ldr	r3, [pc, #76]	@ (8000700 <HAL_InitTick+0x68>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80006bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 f944 	bl	800094e <HAL_SYSTICK_Config>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d10f      	bne.n	80006ec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2b0f      	cmp	r3, #15
 80006d0:	d809      	bhi.n	80006e6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006d2:	2200      	movs	r2, #0
 80006d4:	6879      	ldr	r1, [r7, #4]
 80006d6:	f04f 30ff 	mov.w	r0, #4294967295
 80006da:	f000 f910 	bl	80008fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006de:	4a0a      	ldr	r2, [pc, #40]	@ (8000708 <HAL_InitTick+0x70>)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	e007      	b.n	80006f6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80006e6:	2301      	movs	r3, #1
 80006e8:	73fb      	strb	r3, [r7, #15]
 80006ea:	e004      	b.n	80006f6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006ec:	2301      	movs	r3, #1
 80006ee:	73fb      	strb	r3, [r7, #15]
 80006f0:	e001      	b.n	80006f6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006f2:	2301      	movs	r3, #1
 80006f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3710      	adds	r7, #16
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000008 	.word	0x20000008
 8000704:	20000000 	.word	0x20000000
 8000708:	20000004 	.word	0x20000004

0800070c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000710:	4b05      	ldr	r3, [pc, #20]	@ (8000728 <HAL_IncTick+0x1c>)
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	4b05      	ldr	r3, [pc, #20]	@ (800072c <HAL_IncTick+0x20>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4413      	add	r3, r2
 800071a:	4a03      	ldr	r2, [pc, #12]	@ (8000728 <HAL_IncTick+0x1c>)
 800071c:	6013      	str	r3, [r2, #0]
}
 800071e:	bf00      	nop
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	20000078 	.word	0x20000078
 800072c:	20000008 	.word	0x20000008

08000730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  return uwTick;
 8000734:	4b03      	ldr	r3, [pc, #12]	@ (8000744 <HAL_GetTick+0x14>)
 8000736:	681b      	ldr	r3, [r3, #0]
}
 8000738:	4618      	mov	r0, r3
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	20000078 	.word	0x20000078

08000748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f003 0307 	and.w	r3, r3, #7
 8000756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000758:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <__NVIC_SetPriorityGrouping+0x44>)
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800075e:	68ba      	ldr	r2, [r7, #8]
 8000760:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000764:	4013      	ands	r3, r2
 8000766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000770:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000774:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800077a:	4a04      	ldr	r2, [pc, #16]	@ (800078c <__NVIC_SetPriorityGrouping+0x44>)
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	60d3      	str	r3, [r2, #12]
}
 8000780:	bf00      	nop
 8000782:	3714      	adds	r7, #20
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000794:	4b04      	ldr	r3, [pc, #16]	@ (80007a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000796:	68db      	ldr	r3, [r3, #12]
 8000798:	0a1b      	lsrs	r3, r3, #8
 800079a:	f003 0307 	and.w	r3, r3, #7
}
 800079e:	4618      	mov	r0, r3
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	db0b      	blt.n	80007d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	f003 021f 	and.w	r2, r3, #31
 80007c4:	4907      	ldr	r1, [pc, #28]	@ (80007e4 <__NVIC_EnableIRQ+0x38>)
 80007c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ca:	095b      	lsrs	r3, r3, #5
 80007cc:	2001      	movs	r0, #1
 80007ce:	fa00 f202 	lsl.w	r2, r0, r2
 80007d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	e000e100 	.word	0xe000e100

080007e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	6039      	str	r1, [r7, #0]
 80007f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	db0a      	blt.n	8000812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	490c      	ldr	r1, [pc, #48]	@ (8000834 <__NVIC_SetPriority+0x4c>)
 8000802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000806:	0112      	lsls	r2, r2, #4
 8000808:	b2d2      	uxtb	r2, r2
 800080a:	440b      	add	r3, r1
 800080c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000810:	e00a      	b.n	8000828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	b2da      	uxtb	r2, r3
 8000816:	4908      	ldr	r1, [pc, #32]	@ (8000838 <__NVIC_SetPriority+0x50>)
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	f003 030f 	and.w	r3, r3, #15
 800081e:	3b04      	subs	r3, #4
 8000820:	0112      	lsls	r2, r2, #4
 8000822:	b2d2      	uxtb	r2, r2
 8000824:	440b      	add	r3, r1
 8000826:	761a      	strb	r2, [r3, #24]
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	e000e100 	.word	0xe000e100
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800083c:	b480      	push	{r7}
 800083e:	b089      	sub	sp, #36	@ 0x24
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	f003 0307 	and.w	r3, r3, #7
 800084e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000850:	69fb      	ldr	r3, [r7, #28]
 8000852:	f1c3 0307 	rsb	r3, r3, #7
 8000856:	2b04      	cmp	r3, #4
 8000858:	bf28      	it	cs
 800085a:	2304      	movcs	r3, #4
 800085c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	3304      	adds	r3, #4
 8000862:	2b06      	cmp	r3, #6
 8000864:	d902      	bls.n	800086c <NVIC_EncodePriority+0x30>
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	3b03      	subs	r3, #3
 800086a:	e000      	b.n	800086e <NVIC_EncodePriority+0x32>
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000870:	f04f 32ff 	mov.w	r2, #4294967295
 8000874:	69bb      	ldr	r3, [r7, #24]
 8000876:	fa02 f303 	lsl.w	r3, r2, r3
 800087a:	43da      	mvns	r2, r3
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	401a      	ands	r2, r3
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000884:	f04f 31ff 	mov.w	r1, #4294967295
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	fa01 f303 	lsl.w	r3, r1, r3
 800088e:	43d9      	mvns	r1, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000894:	4313      	orrs	r3, r2
         );
}
 8000896:	4618      	mov	r0, r3
 8000898:	3724      	adds	r7, #36	@ 0x24
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
	...

080008a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	3b01      	subs	r3, #1
 80008b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008b4:	d301      	bcc.n	80008ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008b6:	2301      	movs	r3, #1
 80008b8:	e00f      	b.n	80008da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ba:	4a0a      	ldr	r2, [pc, #40]	@ (80008e4 <SysTick_Config+0x40>)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	3b01      	subs	r3, #1
 80008c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008c2:	210f      	movs	r1, #15
 80008c4:	f04f 30ff 	mov.w	r0, #4294967295
 80008c8:	f7ff ff8e 	bl	80007e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008cc:	4b05      	ldr	r3, [pc, #20]	@ (80008e4 <SysTick_Config+0x40>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008d2:	4b04      	ldr	r3, [pc, #16]	@ (80008e4 <SysTick_Config+0x40>)
 80008d4:	2207      	movs	r2, #7
 80008d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008d8:	2300      	movs	r3, #0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	e000e010 	.word	0xe000e010

080008e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f7ff ff29 	bl	8000748 <__NVIC_SetPriorityGrouping>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b086      	sub	sp, #24
 8000902:	af00      	add	r7, sp, #0
 8000904:	4603      	mov	r3, r0
 8000906:	60b9      	str	r1, [r7, #8]
 8000908:	607a      	str	r2, [r7, #4]
 800090a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800090c:	f7ff ff40 	bl	8000790 <__NVIC_GetPriorityGrouping>
 8000910:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	68b9      	ldr	r1, [r7, #8]
 8000916:	6978      	ldr	r0, [r7, #20]
 8000918:	f7ff ff90 	bl	800083c <NVIC_EncodePriority>
 800091c:	4602      	mov	r2, r0
 800091e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000922:	4611      	mov	r1, r2
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff ff5f 	bl	80007e8 <__NVIC_SetPriority>
}
 800092a:	bf00      	nop
 800092c:	3718      	adds	r7, #24
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	b082      	sub	sp, #8
 8000936:	af00      	add	r7, sp, #0
 8000938:	4603      	mov	r3, r0
 800093a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800093c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff ff33 	bl	80007ac <__NVIC_EnableIRQ>
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f7ff ffa4 	bl	80008a4 <SysTick_Config>
 800095c:	4603      	mov	r3, r0
}
 800095e:	4618      	mov	r0, r3
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000968:	b480      	push	{r7}
 800096a:	b087      	sub	sp, #28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000976:	e15a      	b.n	8000c2e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	2101      	movs	r1, #1
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	fa01 f303 	lsl.w	r3, r1, r3
 8000984:	4013      	ands	r3, r2
 8000986:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	2b00      	cmp	r3, #0
 800098c:	f000 814c 	beq.w	8000c28 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f003 0303 	and.w	r3, r3, #3
 8000998:	2b01      	cmp	r3, #1
 800099a:	d005      	beq.n	80009a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	d130      	bne.n	8000a0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	2203      	movs	r2, #3
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	43db      	mvns	r3, r3
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	4013      	ands	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	68da      	ldr	r2, [r3, #12]
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	fa02 f303 	lsl.w	r3, r2, r3
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009de:	2201      	movs	r2, #1
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	43db      	mvns	r3, r3
 80009e8:	693a      	ldr	r2, [r7, #16]
 80009ea:	4013      	ands	r3, r2
 80009ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	091b      	lsrs	r3, r3, #4
 80009f4:	f003 0201 	and.w	r2, r3, #1
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	f003 0303 	and.w	r3, r3, #3
 8000a12:	2b03      	cmp	r3, #3
 8000a14:	d017      	beq.n	8000a46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	68db      	ldr	r3, [r3, #12]
 8000a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	2203      	movs	r2, #3
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43db      	mvns	r3, r3
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	689a      	ldr	r2, [r3, #8]
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	f003 0303 	and.w	r3, r3, #3
 8000a4e:	2b02      	cmp	r3, #2
 8000a50:	d123      	bne.n	8000a9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	08da      	lsrs	r2, r3, #3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	3208      	adds	r2, #8
 8000a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	220f      	movs	r2, #15
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4013      	ands	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	691a      	ldr	r2, [r3, #16]
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	f003 0307 	and.w	r3, r3, #7
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	08da      	lsrs	r2, r3, #3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3208      	adds	r2, #8
 8000a94:	6939      	ldr	r1, [r7, #16]
 8000a96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	2203      	movs	r2, #3
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	43db      	mvns	r3, r3
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f003 0203 	and.w	r2, r3, #3
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f000 80a6 	beq.w	8000c28 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000adc:	4b5b      	ldr	r3, [pc, #364]	@ (8000c4c <HAL_GPIO_Init+0x2e4>)
 8000ade:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ae0:	4a5a      	ldr	r2, [pc, #360]	@ (8000c4c <HAL_GPIO_Init+0x2e4>)
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ae8:	4b58      	ldr	r3, [pc, #352]	@ (8000c4c <HAL_GPIO_Init+0x2e4>)
 8000aea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000af4:	4a56      	ldr	r2, [pc, #344]	@ (8000c50 <HAL_GPIO_Init+0x2e8>)
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	089b      	lsrs	r3, r3, #2
 8000afa:	3302      	adds	r3, #2
 8000afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	f003 0303 	and.w	r3, r3, #3
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	220f      	movs	r2, #15
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	43db      	mvns	r3, r3
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4013      	ands	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000b1e:	d01f      	beq.n	8000b60 <HAL_GPIO_Init+0x1f8>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a4c      	ldr	r2, [pc, #304]	@ (8000c54 <HAL_GPIO_Init+0x2ec>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d019      	beq.n	8000b5c <HAL_GPIO_Init+0x1f4>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a4b      	ldr	r2, [pc, #300]	@ (8000c58 <HAL_GPIO_Init+0x2f0>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d013      	beq.n	8000b58 <HAL_GPIO_Init+0x1f0>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a4a      	ldr	r2, [pc, #296]	@ (8000c5c <HAL_GPIO_Init+0x2f4>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d00d      	beq.n	8000b54 <HAL_GPIO_Init+0x1ec>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a49      	ldr	r2, [pc, #292]	@ (8000c60 <HAL_GPIO_Init+0x2f8>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d007      	beq.n	8000b50 <HAL_GPIO_Init+0x1e8>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a48      	ldr	r2, [pc, #288]	@ (8000c64 <HAL_GPIO_Init+0x2fc>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d101      	bne.n	8000b4c <HAL_GPIO_Init+0x1e4>
 8000b48:	2305      	movs	r3, #5
 8000b4a:	e00a      	b.n	8000b62 <HAL_GPIO_Init+0x1fa>
 8000b4c:	2306      	movs	r3, #6
 8000b4e:	e008      	b.n	8000b62 <HAL_GPIO_Init+0x1fa>
 8000b50:	2304      	movs	r3, #4
 8000b52:	e006      	b.n	8000b62 <HAL_GPIO_Init+0x1fa>
 8000b54:	2303      	movs	r3, #3
 8000b56:	e004      	b.n	8000b62 <HAL_GPIO_Init+0x1fa>
 8000b58:	2302      	movs	r3, #2
 8000b5a:	e002      	b.n	8000b62 <HAL_GPIO_Init+0x1fa>
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	e000      	b.n	8000b62 <HAL_GPIO_Init+0x1fa>
 8000b60:	2300      	movs	r3, #0
 8000b62:	697a      	ldr	r2, [r7, #20]
 8000b64:	f002 0203 	and.w	r2, r2, #3
 8000b68:	0092      	lsls	r2, r2, #2
 8000b6a:	4093      	lsls	r3, r2
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b72:	4937      	ldr	r1, [pc, #220]	@ (8000c50 <HAL_GPIO_Init+0x2e8>)
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	089b      	lsrs	r3, r3, #2
 8000b78:	3302      	adds	r3, #2
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b80:	4b39      	ldr	r3, [pc, #228]	@ (8000c68 <HAL_GPIO_Init+0x300>)
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d003      	beq.n	8000ba4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ba4:	4a30      	ldr	r2, [pc, #192]	@ (8000c68 <HAL_GPIO_Init+0x300>)
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000baa:	4b2f      	ldr	r3, [pc, #188]	@ (8000c68 <HAL_GPIO_Init+0x300>)
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d003      	beq.n	8000bce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bce:	4a26      	ldr	r2, [pc, #152]	@ (8000c68 <HAL_GPIO_Init+0x300>)
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000bd4:	4b24      	ldr	r3, [pc, #144]	@ (8000c68 <HAL_GPIO_Init+0x300>)
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	4013      	ands	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d003      	beq.n	8000bf8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000bf8:	4a1b      	ldr	r2, [pc, #108]	@ (8000c68 <HAL_GPIO_Init+0x300>)
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000c68 <HAL_GPIO_Init+0x300>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	43db      	mvns	r3, r3
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d003      	beq.n	8000c22 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c22:	4a11      	ldr	r2, [pc, #68]	@ (8000c68 <HAL_GPIO_Init+0x300>)
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	fa22 f303 	lsr.w	r3, r2, r3
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	f47f ae9d 	bne.w	8000978 <HAL_GPIO_Init+0x10>
  }
}
 8000c3e:	bf00      	nop
 8000c40:	bf00      	nop
 8000c42:	371c      	adds	r7, #28
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	40010000 	.word	0x40010000
 8000c54:	48000400 	.word	0x48000400
 8000c58:	48000800 	.word	0x48000800
 8000c5c:	48000c00 	.word	0x48000c00
 8000c60:	48001000 	.word	0x48001000
 8000c64:	48001400 	.word	0x48001400
 8000c68:	40010400 	.word	0x40010400

08000c6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c76:	4b08      	ldr	r3, [pc, #32]	@ (8000c98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c78:	695a      	ldr	r2, [r3, #20]
 8000c7a:	88fb      	ldrh	r3, [r7, #6]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d006      	beq.n	8000c90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c82:	4a05      	ldr	r2, [pc, #20]	@ (8000c98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c84:	88fb      	ldrh	r3, [r7, #6]
 8000c86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c88:	88fb      	ldrh	r3, [r7, #6]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fb58 	bl	8000340 <HAL_GPIO_EXTI_Callback>
  }
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40010400 	.word	0x40010400

08000c9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d141      	bne.n	8000d2e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000caa:	4b4b      	ldr	r3, [pc, #300]	@ (8000dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000cb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cb6:	d131      	bne.n	8000d1c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000cb8:	4b47      	ldr	r3, [pc, #284]	@ (8000dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000cbe:	4a46      	ldr	r2, [pc, #280]	@ (8000dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000cc4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cc8:	4b43      	ldr	r3, [pc, #268]	@ (8000dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000cd0:	4a41      	ldr	r2, [pc, #260]	@ (8000dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cd6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000cd8:	4b40      	ldr	r3, [pc, #256]	@ (8000ddc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2232      	movs	r2, #50	@ 0x32
 8000cde:	fb02 f303 	mul.w	r3, r2, r3
 8000ce2:	4a3f      	ldr	r2, [pc, #252]	@ (8000de0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce8:	0c9b      	lsrs	r3, r3, #18
 8000cea:	3301      	adds	r3, #1
 8000cec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cee:	e002      	b.n	8000cf6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cf6:	4b38      	ldr	r3, [pc, #224]	@ (8000dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000cfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d02:	d102      	bne.n	8000d0a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d1f2      	bne.n	8000cf0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d0a:	4b33      	ldr	r3, [pc, #204]	@ (8000dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d0c:	695b      	ldr	r3, [r3, #20]
 8000d0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d16:	d158      	bne.n	8000dca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	e057      	b.n	8000dcc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d1c:	4b2e      	ldr	r3, [pc, #184]	@ (8000dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d22:	4a2d      	ldr	r2, [pc, #180]	@ (8000dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000d28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000d2c:	e04d      	b.n	8000dca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d34:	d141      	bne.n	8000dba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d36:	4b28      	ldr	r3, [pc, #160]	@ (8000dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d42:	d131      	bne.n	8000da8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d44:	4b24      	ldr	r3, [pc, #144]	@ (8000dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d4a:	4a23      	ldr	r2, [pc, #140]	@ (8000dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d54:	4b20      	ldr	r3, [pc, #128]	@ (8000dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000d5c:	4a1e      	ldr	r2, [pc, #120]	@ (8000dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d64:	4b1d      	ldr	r3, [pc, #116]	@ (8000ddc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2232      	movs	r2, #50	@ 0x32
 8000d6a:	fb02 f303 	mul.w	r3, r2, r3
 8000d6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000de0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000d70:	fba2 2303 	umull	r2, r3, r2, r3
 8000d74:	0c9b      	lsrs	r3, r3, #18
 8000d76:	3301      	adds	r3, #1
 8000d78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d7a:	e002      	b.n	8000d82 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d82:	4b15      	ldr	r3, [pc, #84]	@ (8000dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d8e:	d102      	bne.n	8000d96 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d1f2      	bne.n	8000d7c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d96:	4b10      	ldr	r3, [pc, #64]	@ (8000dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000da2:	d112      	bne.n	8000dca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000da4:	2303      	movs	r3, #3
 8000da6:	e011      	b.n	8000dcc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000da8:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dae:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000db0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000db4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000db8:	e007      	b.n	8000dca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000dba:	4b07      	ldr	r3, [pc, #28]	@ (8000dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000dc2:	4a05      	ldr	r2, [pc, #20]	@ (8000dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dc4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dc8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000dca:	2300      	movs	r3, #0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	40007000 	.word	0x40007000
 8000ddc:	20000000 	.word	0x20000000
 8000de0:	431bde83 	.word	0x431bde83

08000de4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000de8:	4b05      	ldr	r3, [pc, #20]	@ (8000e00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	4a04      	ldr	r2, [pc, #16]	@ (8000e00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000dee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000df2:	6093      	str	r3, [r2, #8]
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	40007000 	.word	0x40007000

08000e04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d101      	bne.n	8000e16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e2fe      	b.n	8001414 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d075      	beq.n	8000f0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e22:	4b97      	ldr	r3, [pc, #604]	@ (8001080 <HAL_RCC_OscConfig+0x27c>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	f003 030c 	and.w	r3, r3, #12
 8000e2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e2c:	4b94      	ldr	r3, [pc, #592]	@ (8001080 <HAL_RCC_OscConfig+0x27c>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	2b0c      	cmp	r3, #12
 8000e3a:	d102      	bne.n	8000e42 <HAL_RCC_OscConfig+0x3e>
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	2b03      	cmp	r3, #3
 8000e40:	d002      	beq.n	8000e48 <HAL_RCC_OscConfig+0x44>
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	2b08      	cmp	r3, #8
 8000e46:	d10b      	bne.n	8000e60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e48:	4b8d      	ldr	r3, [pc, #564]	@ (8001080 <HAL_RCC_OscConfig+0x27c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d05b      	beq.n	8000f0c <HAL_RCC_OscConfig+0x108>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d157      	bne.n	8000f0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e2d9      	b.n	8001414 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e68:	d106      	bne.n	8000e78 <HAL_RCC_OscConfig+0x74>
 8000e6a:	4b85      	ldr	r3, [pc, #532]	@ (8001080 <HAL_RCC_OscConfig+0x27c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a84      	ldr	r2, [pc, #528]	@ (8001080 <HAL_RCC_OscConfig+0x27c>)
 8000e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e74:	6013      	str	r3, [r2, #0]
 8000e76:	e01d      	b.n	8000eb4 <HAL_RCC_OscConfig+0xb0>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e80:	d10c      	bne.n	8000e9c <HAL_RCC_OscConfig+0x98>
 8000e82:	4b7f      	ldr	r3, [pc, #508]	@ (8001080 <HAL_RCC_OscConfig+0x27c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a7e      	ldr	r2, [pc, #504]	@ (8001080 <HAL_RCC_OscConfig+0x27c>)
 8000e88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	4b7c      	ldr	r3, [pc, #496]	@ (8001080 <HAL_RCC_OscConfig+0x27c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a7b      	ldr	r2, [pc, #492]	@ (8001080 <HAL_RCC_OscConfig+0x27c>)
 8000e94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e98:	6013      	str	r3, [r2, #0]
 8000e9a:	e00b      	b.n	8000eb4 <HAL_RCC_OscConfig+0xb0>
 8000e9c:	4b78      	ldr	r3, [pc, #480]	@ (8001080 <HAL_RCC_OscConfig+0x27c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a77      	ldr	r2, [pc, #476]	@ (8001080 <HAL_RCC_OscConfig+0x27c>)
 8000ea2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ea6:	6013      	str	r3, [r2, #0]
 8000ea8:	4b75      	ldr	r3, [pc, #468]	@ (8001080 <HAL_RCC_OscConfig+0x27c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a74      	ldr	r2, [pc, #464]	@ (8001080 <HAL_RCC_OscConfig+0x27c>)
 8000eae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000eb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d013      	beq.n	8000ee4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ebc:	f7ff fc38 	bl	8000730 <HAL_GetTick>
 8000ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ec2:	e008      	b.n	8000ed6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ec4:	f7ff fc34 	bl	8000730 <HAL_GetTick>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	2b64      	cmp	r3, #100	@ 0x64
 8000ed0:	d901      	bls.n	8000ed6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e29e      	b.n	8001414 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ed6:	4b6a      	ldr	r3, [pc, #424]	@ (8001080 <HAL_RCC_OscConfig+0x27c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d0f0      	beq.n	8000ec4 <HAL_RCC_OscConfig+0xc0>
 8000ee2:	e014      	b.n	8000f0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ee4:	f7ff fc24 	bl	8000730 <HAL_GetTick>
 8000ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000eea:	e008      	b.n	8000efe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000eec:	f7ff fc20 	bl	8000730 <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	2b64      	cmp	r3, #100	@ 0x64
 8000ef8:	d901      	bls.n	8000efe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e28a      	b.n	8001414 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000efe:	4b60      	ldr	r3, [pc, #384]	@ (8001080 <HAL_RCC_OscConfig+0x27c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d1f0      	bne.n	8000eec <HAL_RCC_OscConfig+0xe8>
 8000f0a:	e000      	b.n	8000f0e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d075      	beq.n	8001006 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f1a:	4b59      	ldr	r3, [pc, #356]	@ (8001080 <HAL_RCC_OscConfig+0x27c>)
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	f003 030c 	and.w	r3, r3, #12
 8000f22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f24:	4b56      	ldr	r3, [pc, #344]	@ (8001080 <HAL_RCC_OscConfig+0x27c>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	2b0c      	cmp	r3, #12
 8000f32:	d102      	bne.n	8000f3a <HAL_RCC_OscConfig+0x136>
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d002      	beq.n	8000f40 <HAL_RCC_OscConfig+0x13c>
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	2b04      	cmp	r3, #4
 8000f3e:	d11f      	bne.n	8000f80 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f40:	4b4f      	ldr	r3, [pc, #316]	@ (8001080 <HAL_RCC_OscConfig+0x27c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d005      	beq.n	8000f58 <HAL_RCC_OscConfig+0x154>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d101      	bne.n	8000f58 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e25d      	b.n	8001414 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f58:	4b49      	ldr	r3, [pc, #292]	@ (8001080 <HAL_RCC_OscConfig+0x27c>)
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	691b      	ldr	r3, [r3, #16]
 8000f64:	061b      	lsls	r3, r3, #24
 8000f66:	4946      	ldr	r1, [pc, #280]	@ (8001080 <HAL_RCC_OscConfig+0x27c>)
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000f6c:	4b45      	ldr	r3, [pc, #276]	@ (8001084 <HAL_RCC_OscConfig+0x280>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fb91 	bl	8000698 <HAL_InitTick>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d043      	beq.n	8001004 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e249      	b.n	8001414 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d023      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f88:	4b3d      	ldr	r3, [pc, #244]	@ (8001080 <HAL_RCC_OscConfig+0x27c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a3c      	ldr	r2, [pc, #240]	@ (8001080 <HAL_RCC_OscConfig+0x27c>)
 8000f8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f94:	f7ff fbcc 	bl	8000730 <HAL_GetTick>
 8000f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f9a:	e008      	b.n	8000fae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f9c:	f7ff fbc8 	bl	8000730 <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d901      	bls.n	8000fae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e232      	b.n	8001414 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fae:	4b34      	ldr	r3, [pc, #208]	@ (8001080 <HAL_RCC_OscConfig+0x27c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d0f0      	beq.n	8000f9c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fba:	4b31      	ldr	r3, [pc, #196]	@ (8001080 <HAL_RCC_OscConfig+0x27c>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	691b      	ldr	r3, [r3, #16]
 8000fc6:	061b      	lsls	r3, r3, #24
 8000fc8:	492d      	ldr	r1, [pc, #180]	@ (8001080 <HAL_RCC_OscConfig+0x27c>)
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	604b      	str	r3, [r1, #4]
 8000fce:	e01a      	b.n	8001006 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fd0:	4b2b      	ldr	r3, [pc, #172]	@ (8001080 <HAL_RCC_OscConfig+0x27c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a2a      	ldr	r2, [pc, #168]	@ (8001080 <HAL_RCC_OscConfig+0x27c>)
 8000fd6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fdc:	f7ff fba8 	bl	8000730 <HAL_GetTick>
 8000fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fe2:	e008      	b.n	8000ff6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fe4:	f7ff fba4 	bl	8000730 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d901      	bls.n	8000ff6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e20e      	b.n	8001414 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ff6:	4b22      	ldr	r3, [pc, #136]	@ (8001080 <HAL_RCC_OscConfig+0x27c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1f0      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x1e0>
 8001002:	e000      	b.n	8001006 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001004:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0308 	and.w	r3, r3, #8
 800100e:	2b00      	cmp	r3, #0
 8001010:	d041      	beq.n	8001096 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d01c      	beq.n	8001054 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800101a:	4b19      	ldr	r3, [pc, #100]	@ (8001080 <HAL_RCC_OscConfig+0x27c>)
 800101c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001020:	4a17      	ldr	r2, [pc, #92]	@ (8001080 <HAL_RCC_OscConfig+0x27c>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800102a:	f7ff fb81 	bl	8000730 <HAL_GetTick>
 800102e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001030:	e008      	b.n	8001044 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001032:	f7ff fb7d 	bl	8000730 <HAL_GetTick>
 8001036:	4602      	mov	r2, r0
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	2b02      	cmp	r3, #2
 800103e:	d901      	bls.n	8001044 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001040:	2303      	movs	r3, #3
 8001042:	e1e7      	b.n	8001414 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001044:	4b0e      	ldr	r3, [pc, #56]	@ (8001080 <HAL_RCC_OscConfig+0x27c>)
 8001046:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d0ef      	beq.n	8001032 <HAL_RCC_OscConfig+0x22e>
 8001052:	e020      	b.n	8001096 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001054:	4b0a      	ldr	r3, [pc, #40]	@ (8001080 <HAL_RCC_OscConfig+0x27c>)
 8001056:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800105a:	4a09      	ldr	r2, [pc, #36]	@ (8001080 <HAL_RCC_OscConfig+0x27c>)
 800105c:	f023 0301 	bic.w	r3, r3, #1
 8001060:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001064:	f7ff fb64 	bl	8000730 <HAL_GetTick>
 8001068:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800106a:	e00d      	b.n	8001088 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800106c:	f7ff fb60 	bl	8000730 <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d906      	bls.n	8001088 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e1ca      	b.n	8001414 <HAL_RCC_OscConfig+0x610>
 800107e:	bf00      	nop
 8001080:	40021000 	.word	0x40021000
 8001084:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001088:	4b8c      	ldr	r3, [pc, #560]	@ (80012bc <HAL_RCC_OscConfig+0x4b8>)
 800108a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1ea      	bne.n	800106c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0304 	and.w	r3, r3, #4
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f000 80a6 	beq.w	80011f0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010a4:	2300      	movs	r3, #0
 80010a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80010a8:	4b84      	ldr	r3, [pc, #528]	@ (80012bc <HAL_RCC_OscConfig+0x4b8>)
 80010aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d101      	bne.n	80010b8 <HAL_RCC_OscConfig+0x2b4>
 80010b4:	2301      	movs	r3, #1
 80010b6:	e000      	b.n	80010ba <HAL_RCC_OscConfig+0x2b6>
 80010b8:	2300      	movs	r3, #0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00d      	beq.n	80010da <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010be:	4b7f      	ldr	r3, [pc, #508]	@ (80012bc <HAL_RCC_OscConfig+0x4b8>)
 80010c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c2:	4a7e      	ldr	r2, [pc, #504]	@ (80012bc <HAL_RCC_OscConfig+0x4b8>)
 80010c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80010ca:	4b7c      	ldr	r3, [pc, #496]	@ (80012bc <HAL_RCC_OscConfig+0x4b8>)
 80010cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80010d6:	2301      	movs	r3, #1
 80010d8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010da:	4b79      	ldr	r3, [pc, #484]	@ (80012c0 <HAL_RCC_OscConfig+0x4bc>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d118      	bne.n	8001118 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010e6:	4b76      	ldr	r3, [pc, #472]	@ (80012c0 <HAL_RCC_OscConfig+0x4bc>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a75      	ldr	r2, [pc, #468]	@ (80012c0 <HAL_RCC_OscConfig+0x4bc>)
 80010ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010f2:	f7ff fb1d 	bl	8000730 <HAL_GetTick>
 80010f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010f8:	e008      	b.n	800110c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010fa:	f7ff fb19 	bl	8000730 <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d901      	bls.n	800110c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001108:	2303      	movs	r3, #3
 800110a:	e183      	b.n	8001414 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800110c:	4b6c      	ldr	r3, [pc, #432]	@ (80012c0 <HAL_RCC_OscConfig+0x4bc>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001114:	2b00      	cmp	r3, #0
 8001116:	d0f0      	beq.n	80010fa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d108      	bne.n	8001132 <HAL_RCC_OscConfig+0x32e>
 8001120:	4b66      	ldr	r3, [pc, #408]	@ (80012bc <HAL_RCC_OscConfig+0x4b8>)
 8001122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001126:	4a65      	ldr	r2, [pc, #404]	@ (80012bc <HAL_RCC_OscConfig+0x4b8>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001130:	e024      	b.n	800117c <HAL_RCC_OscConfig+0x378>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	2b05      	cmp	r3, #5
 8001138:	d110      	bne.n	800115c <HAL_RCC_OscConfig+0x358>
 800113a:	4b60      	ldr	r3, [pc, #384]	@ (80012bc <HAL_RCC_OscConfig+0x4b8>)
 800113c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001140:	4a5e      	ldr	r2, [pc, #376]	@ (80012bc <HAL_RCC_OscConfig+0x4b8>)
 8001142:	f043 0304 	orr.w	r3, r3, #4
 8001146:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800114a:	4b5c      	ldr	r3, [pc, #368]	@ (80012bc <HAL_RCC_OscConfig+0x4b8>)
 800114c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001150:	4a5a      	ldr	r2, [pc, #360]	@ (80012bc <HAL_RCC_OscConfig+0x4b8>)
 8001152:	f043 0301 	orr.w	r3, r3, #1
 8001156:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800115a:	e00f      	b.n	800117c <HAL_RCC_OscConfig+0x378>
 800115c:	4b57      	ldr	r3, [pc, #348]	@ (80012bc <HAL_RCC_OscConfig+0x4b8>)
 800115e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001162:	4a56      	ldr	r2, [pc, #344]	@ (80012bc <HAL_RCC_OscConfig+0x4b8>)
 8001164:	f023 0301 	bic.w	r3, r3, #1
 8001168:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800116c:	4b53      	ldr	r3, [pc, #332]	@ (80012bc <HAL_RCC_OscConfig+0x4b8>)
 800116e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001172:	4a52      	ldr	r2, [pc, #328]	@ (80012bc <HAL_RCC_OscConfig+0x4b8>)
 8001174:	f023 0304 	bic.w	r3, r3, #4
 8001178:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d016      	beq.n	80011b2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001184:	f7ff fad4 	bl	8000730 <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800118a:	e00a      	b.n	80011a2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800118c:	f7ff fad0 	bl	8000730 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800119a:	4293      	cmp	r3, r2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e138      	b.n	8001414 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011a2:	4b46      	ldr	r3, [pc, #280]	@ (80012bc <HAL_RCC_OscConfig+0x4b8>)
 80011a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d0ed      	beq.n	800118c <HAL_RCC_OscConfig+0x388>
 80011b0:	e015      	b.n	80011de <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011b2:	f7ff fabd 	bl	8000730 <HAL_GetTick>
 80011b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011b8:	e00a      	b.n	80011d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ba:	f7ff fab9 	bl	8000730 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d901      	bls.n	80011d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e121      	b.n	8001414 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011d0:	4b3a      	ldr	r3, [pc, #232]	@ (80012bc <HAL_RCC_OscConfig+0x4b8>)
 80011d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1ed      	bne.n	80011ba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80011de:	7ffb      	ldrb	r3, [r7, #31]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d105      	bne.n	80011f0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011e4:	4b35      	ldr	r3, [pc, #212]	@ (80012bc <HAL_RCC_OscConfig+0x4b8>)
 80011e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011e8:	4a34      	ldr	r2, [pc, #208]	@ (80012bc <HAL_RCC_OscConfig+0x4b8>)
 80011ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011ee:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0320 	and.w	r3, r3, #32
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d03c      	beq.n	8001276 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d01c      	beq.n	800123e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001204:	4b2d      	ldr	r3, [pc, #180]	@ (80012bc <HAL_RCC_OscConfig+0x4b8>)
 8001206:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800120a:	4a2c      	ldr	r2, [pc, #176]	@ (80012bc <HAL_RCC_OscConfig+0x4b8>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001214:	f7ff fa8c 	bl	8000730 <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800121c:	f7ff fa88 	bl	8000730 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e0f2      	b.n	8001414 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800122e:	4b23      	ldr	r3, [pc, #140]	@ (80012bc <HAL_RCC_OscConfig+0x4b8>)
 8001230:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0ef      	beq.n	800121c <HAL_RCC_OscConfig+0x418>
 800123c:	e01b      	b.n	8001276 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800123e:	4b1f      	ldr	r3, [pc, #124]	@ (80012bc <HAL_RCC_OscConfig+0x4b8>)
 8001240:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001244:	4a1d      	ldr	r2, [pc, #116]	@ (80012bc <HAL_RCC_OscConfig+0x4b8>)
 8001246:	f023 0301 	bic.w	r3, r3, #1
 800124a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800124e:	f7ff fa6f 	bl	8000730 <HAL_GetTick>
 8001252:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001254:	e008      	b.n	8001268 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001256:	f7ff fa6b 	bl	8000730 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e0d5      	b.n	8001414 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001268:	4b14      	ldr	r3, [pc, #80]	@ (80012bc <HAL_RCC_OscConfig+0x4b8>)
 800126a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1ef      	bne.n	8001256 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 80c9 	beq.w	8001412 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001280:	4b0e      	ldr	r3, [pc, #56]	@ (80012bc <HAL_RCC_OscConfig+0x4b8>)
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f003 030c 	and.w	r3, r3, #12
 8001288:	2b0c      	cmp	r3, #12
 800128a:	f000 8083 	beq.w	8001394 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	2b02      	cmp	r3, #2
 8001294:	d15e      	bne.n	8001354 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001296:	4b09      	ldr	r3, [pc, #36]	@ (80012bc <HAL_RCC_OscConfig+0x4b8>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a08      	ldr	r2, [pc, #32]	@ (80012bc <HAL_RCC_OscConfig+0x4b8>)
 800129c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80012a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a2:	f7ff fa45 	bl	8000730 <HAL_GetTick>
 80012a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012a8:	e00c      	b.n	80012c4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012aa:	f7ff fa41 	bl	8000730 <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d905      	bls.n	80012c4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e0ab      	b.n	8001414 <HAL_RCC_OscConfig+0x610>
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012c4:	4b55      	ldr	r3, [pc, #340]	@ (800141c <HAL_RCC_OscConfig+0x618>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1ec      	bne.n	80012aa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012d0:	4b52      	ldr	r3, [pc, #328]	@ (800141c <HAL_RCC_OscConfig+0x618>)
 80012d2:	68da      	ldr	r2, [r3, #12]
 80012d4:	4b52      	ldr	r3, [pc, #328]	@ (8001420 <HAL_RCC_OscConfig+0x61c>)
 80012d6:	4013      	ands	r3, r2
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	6a11      	ldr	r1, [r2, #32]
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80012e0:	3a01      	subs	r2, #1
 80012e2:	0112      	lsls	r2, r2, #4
 80012e4:	4311      	orrs	r1, r2
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80012ea:	0212      	lsls	r2, r2, #8
 80012ec:	4311      	orrs	r1, r2
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80012f2:	0852      	lsrs	r2, r2, #1
 80012f4:	3a01      	subs	r2, #1
 80012f6:	0552      	lsls	r2, r2, #21
 80012f8:	4311      	orrs	r1, r2
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80012fe:	0852      	lsrs	r2, r2, #1
 8001300:	3a01      	subs	r2, #1
 8001302:	0652      	lsls	r2, r2, #25
 8001304:	4311      	orrs	r1, r2
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800130a:	06d2      	lsls	r2, r2, #27
 800130c:	430a      	orrs	r2, r1
 800130e:	4943      	ldr	r1, [pc, #268]	@ (800141c <HAL_RCC_OscConfig+0x618>)
 8001310:	4313      	orrs	r3, r2
 8001312:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001314:	4b41      	ldr	r3, [pc, #260]	@ (800141c <HAL_RCC_OscConfig+0x618>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a40      	ldr	r2, [pc, #256]	@ (800141c <HAL_RCC_OscConfig+0x618>)
 800131a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800131e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001320:	4b3e      	ldr	r3, [pc, #248]	@ (800141c <HAL_RCC_OscConfig+0x618>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	4a3d      	ldr	r2, [pc, #244]	@ (800141c <HAL_RCC_OscConfig+0x618>)
 8001326:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800132a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800132c:	f7ff fa00 	bl	8000730 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001334:	f7ff f9fc 	bl	8000730 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e066      	b.n	8001414 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001346:	4b35      	ldr	r3, [pc, #212]	@ (800141c <HAL_RCC_OscConfig+0x618>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0f0      	beq.n	8001334 <HAL_RCC_OscConfig+0x530>
 8001352:	e05e      	b.n	8001412 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001354:	4b31      	ldr	r3, [pc, #196]	@ (800141c <HAL_RCC_OscConfig+0x618>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a30      	ldr	r2, [pc, #192]	@ (800141c <HAL_RCC_OscConfig+0x618>)
 800135a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800135e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001360:	f7ff f9e6 	bl	8000730 <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001368:	f7ff f9e2 	bl	8000730 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e04c      	b.n	8001414 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800137a:	4b28      	ldr	r3, [pc, #160]	@ (800141c <HAL_RCC_OscConfig+0x618>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1f0      	bne.n	8001368 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001386:	4b25      	ldr	r3, [pc, #148]	@ (800141c <HAL_RCC_OscConfig+0x618>)
 8001388:	68da      	ldr	r2, [r3, #12]
 800138a:	4924      	ldr	r1, [pc, #144]	@ (800141c <HAL_RCC_OscConfig+0x618>)
 800138c:	4b25      	ldr	r3, [pc, #148]	@ (8001424 <HAL_RCC_OscConfig+0x620>)
 800138e:	4013      	ands	r3, r2
 8001390:	60cb      	str	r3, [r1, #12]
 8001392:	e03e      	b.n	8001412 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	69db      	ldr	r3, [r3, #28]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d101      	bne.n	80013a0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e039      	b.n	8001414 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80013a0:	4b1e      	ldr	r3, [pc, #120]	@ (800141c <HAL_RCC_OscConfig+0x618>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	f003 0203 	and.w	r2, r3, #3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d12c      	bne.n	800140e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013be:	3b01      	subs	r3, #1
 80013c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d123      	bne.n	800140e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d11b      	bne.n	800140e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013e0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d113      	bne.n	800140e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f0:	085b      	lsrs	r3, r3, #1
 80013f2:	3b01      	subs	r3, #1
 80013f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d109      	bne.n	800140e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001404:	085b      	lsrs	r3, r3, #1
 8001406:	3b01      	subs	r3, #1
 8001408:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800140a:	429a      	cmp	r2, r3
 800140c:	d001      	beq.n	8001412 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e000      	b.n	8001414 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	3720      	adds	r7, #32
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40021000 	.word	0x40021000
 8001420:	019f800c 	.word	0x019f800c
 8001424:	feeefffc 	.word	0xfeeefffc

08001428 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d101      	bne.n	8001440 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e11e      	b.n	800167e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001440:	4b91      	ldr	r3, [pc, #580]	@ (8001688 <HAL_RCC_ClockConfig+0x260>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 030f 	and.w	r3, r3, #15
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	429a      	cmp	r2, r3
 800144c:	d910      	bls.n	8001470 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800144e:	4b8e      	ldr	r3, [pc, #568]	@ (8001688 <HAL_RCC_ClockConfig+0x260>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f023 020f 	bic.w	r2, r3, #15
 8001456:	498c      	ldr	r1, [pc, #560]	@ (8001688 <HAL_RCC_ClockConfig+0x260>)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	4313      	orrs	r3, r2
 800145c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800145e:	4b8a      	ldr	r3, [pc, #552]	@ (8001688 <HAL_RCC_ClockConfig+0x260>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	429a      	cmp	r2, r3
 800146a:	d001      	beq.n	8001470 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e106      	b.n	800167e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	2b00      	cmp	r3, #0
 800147a:	d073      	beq.n	8001564 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b03      	cmp	r3, #3
 8001482:	d129      	bne.n	80014d8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001484:	4b81      	ldr	r3, [pc, #516]	@ (800168c <HAL_RCC_ClockConfig+0x264>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d101      	bne.n	8001494 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e0f4      	b.n	800167e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001494:	f000 f966 	bl	8001764 <RCC_GetSysClockFreqFromPLLSource>
 8001498:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4a7c      	ldr	r2, [pc, #496]	@ (8001690 <HAL_RCC_ClockConfig+0x268>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d93f      	bls.n	8001522 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80014a2:	4b7a      	ldr	r3, [pc, #488]	@ (800168c <HAL_RCC_ClockConfig+0x264>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d009      	beq.n	80014c2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d033      	beq.n	8001522 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d12f      	bne.n	8001522 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80014c2:	4b72      	ldr	r3, [pc, #456]	@ (800168c <HAL_RCC_ClockConfig+0x264>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80014ca:	4a70      	ldr	r2, [pc, #448]	@ (800168c <HAL_RCC_ClockConfig+0x264>)
 80014cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80014d2:	2380      	movs	r3, #128	@ 0x80
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	e024      	b.n	8001522 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d107      	bne.n	80014f0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014e0:	4b6a      	ldr	r3, [pc, #424]	@ (800168c <HAL_RCC_ClockConfig+0x264>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d109      	bne.n	8001500 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e0c6      	b.n	800167e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014f0:	4b66      	ldr	r3, [pc, #408]	@ (800168c <HAL_RCC_ClockConfig+0x264>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e0be      	b.n	800167e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001500:	f000 f8ce 	bl	80016a0 <HAL_RCC_GetSysClockFreq>
 8001504:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	4a61      	ldr	r2, [pc, #388]	@ (8001690 <HAL_RCC_ClockConfig+0x268>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d909      	bls.n	8001522 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800150e:	4b5f      	ldr	r3, [pc, #380]	@ (800168c <HAL_RCC_ClockConfig+0x264>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001516:	4a5d      	ldr	r2, [pc, #372]	@ (800168c <HAL_RCC_ClockConfig+0x264>)
 8001518:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800151c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001522:	4b5a      	ldr	r3, [pc, #360]	@ (800168c <HAL_RCC_ClockConfig+0x264>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f023 0203 	bic.w	r2, r3, #3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	4957      	ldr	r1, [pc, #348]	@ (800168c <HAL_RCC_ClockConfig+0x264>)
 8001530:	4313      	orrs	r3, r2
 8001532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001534:	f7ff f8fc 	bl	8000730 <HAL_GetTick>
 8001538:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800153a:	e00a      	b.n	8001552 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800153c:	f7ff f8f8 	bl	8000730 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	f241 3288 	movw	r2, #5000	@ 0x1388
 800154a:	4293      	cmp	r3, r2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e095      	b.n	800167e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001552:	4b4e      	ldr	r3, [pc, #312]	@ (800168c <HAL_RCC_ClockConfig+0x264>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 020c 	and.w	r2, r3, #12
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	429a      	cmp	r2, r3
 8001562:	d1eb      	bne.n	800153c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d023      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800157c:	4b43      	ldr	r3, [pc, #268]	@ (800168c <HAL_RCC_ClockConfig+0x264>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	4a42      	ldr	r2, [pc, #264]	@ (800168c <HAL_RCC_ClockConfig+0x264>)
 8001582:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001586:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0308 	and.w	r3, r3, #8
 8001590:	2b00      	cmp	r3, #0
 8001592:	d007      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001594:	4b3d      	ldr	r3, [pc, #244]	@ (800168c <HAL_RCC_ClockConfig+0x264>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800159c:	4a3b      	ldr	r2, [pc, #236]	@ (800168c <HAL_RCC_ClockConfig+0x264>)
 800159e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80015a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015a4:	4b39      	ldr	r3, [pc, #228]	@ (800168c <HAL_RCC_ClockConfig+0x264>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	4936      	ldr	r1, [pc, #216]	@ (800168c <HAL_RCC_ClockConfig+0x264>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	608b      	str	r3, [r1, #8]
 80015b6:	e008      	b.n	80015ca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	2b80      	cmp	r3, #128	@ 0x80
 80015bc:	d105      	bne.n	80015ca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80015be:	4b33      	ldr	r3, [pc, #204]	@ (800168c <HAL_RCC_ClockConfig+0x264>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	4a32      	ldr	r2, [pc, #200]	@ (800168c <HAL_RCC_ClockConfig+0x264>)
 80015c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80015c8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001688 <HAL_RCC_ClockConfig+0x260>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 030f 	and.w	r3, r3, #15
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d21d      	bcs.n	8001614 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001688 <HAL_RCC_ClockConfig+0x260>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f023 020f 	bic.w	r2, r3, #15
 80015e0:	4929      	ldr	r1, [pc, #164]	@ (8001688 <HAL_RCC_ClockConfig+0x260>)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80015e8:	f7ff f8a2 	bl	8000730 <HAL_GetTick>
 80015ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ee:	e00a      	b.n	8001606 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f0:	f7ff f89e 	bl	8000730 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015fe:	4293      	cmp	r3, r2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e03b      	b.n	800167e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001606:	4b20      	ldr	r3, [pc, #128]	@ (8001688 <HAL_RCC_ClockConfig+0x260>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	d1ed      	bne.n	80015f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	2b00      	cmp	r3, #0
 800161e:	d008      	beq.n	8001632 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001620:	4b1a      	ldr	r3, [pc, #104]	@ (800168c <HAL_RCC_ClockConfig+0x264>)
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	4917      	ldr	r1, [pc, #92]	@ (800168c <HAL_RCC_ClockConfig+0x264>)
 800162e:	4313      	orrs	r3, r2
 8001630:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0308 	and.w	r3, r3, #8
 800163a:	2b00      	cmp	r3, #0
 800163c:	d009      	beq.n	8001652 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800163e:	4b13      	ldr	r3, [pc, #76]	@ (800168c <HAL_RCC_ClockConfig+0x264>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	490f      	ldr	r1, [pc, #60]	@ (800168c <HAL_RCC_ClockConfig+0x264>)
 800164e:	4313      	orrs	r3, r2
 8001650:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001652:	f000 f825 	bl	80016a0 <HAL_RCC_GetSysClockFreq>
 8001656:	4602      	mov	r2, r0
 8001658:	4b0c      	ldr	r3, [pc, #48]	@ (800168c <HAL_RCC_ClockConfig+0x264>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	091b      	lsrs	r3, r3, #4
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	490c      	ldr	r1, [pc, #48]	@ (8001694 <HAL_RCC_ClockConfig+0x26c>)
 8001664:	5ccb      	ldrb	r3, [r1, r3]
 8001666:	f003 031f 	and.w	r3, r3, #31
 800166a:	fa22 f303 	lsr.w	r3, r2, r3
 800166e:	4a0a      	ldr	r2, [pc, #40]	@ (8001698 <HAL_RCC_ClockConfig+0x270>)
 8001670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001672:	4b0a      	ldr	r3, [pc, #40]	@ (800169c <HAL_RCC_ClockConfig+0x274>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff f80e 	bl	8000698 <HAL_InitTick>
 800167c:	4603      	mov	r3, r0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40022000 	.word	0x40022000
 800168c:	40021000 	.word	0x40021000
 8001690:	04c4b400 	.word	0x04c4b400
 8001694:	080028ec 	.word	0x080028ec
 8001698:	20000000 	.word	0x20000000
 800169c:	20000004 	.word	0x20000004

080016a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b087      	sub	sp, #28
 80016a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80016a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001758 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 030c 	and.w	r3, r3, #12
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	d102      	bne.n	80016b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80016b2:	4b2a      	ldr	r3, [pc, #168]	@ (800175c <HAL_RCC_GetSysClockFreq+0xbc>)
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	e047      	b.n	8001748 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80016b8:	4b27      	ldr	r3, [pc, #156]	@ (8001758 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f003 030c 	and.w	r3, r3, #12
 80016c0:	2b08      	cmp	r3, #8
 80016c2:	d102      	bne.n	80016ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016c4:	4b26      	ldr	r3, [pc, #152]	@ (8001760 <HAL_RCC_GetSysClockFreq+0xc0>)
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	e03e      	b.n	8001748 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80016ca:	4b23      	ldr	r3, [pc, #140]	@ (8001758 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 030c 	and.w	r3, r3, #12
 80016d2:	2b0c      	cmp	r3, #12
 80016d4:	d136      	bne.n	8001744 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016d6:	4b20      	ldr	r3, [pc, #128]	@ (8001758 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80016e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001758 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	091b      	lsrs	r3, r3, #4
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	3301      	adds	r3, #1
 80016ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2b03      	cmp	r3, #3
 80016f2:	d10c      	bne.n	800170e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80016f4:	4a1a      	ldr	r2, [pc, #104]	@ (8001760 <HAL_RCC_GetSysClockFreq+0xc0>)
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fc:	4a16      	ldr	r2, [pc, #88]	@ (8001758 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016fe:	68d2      	ldr	r2, [r2, #12]
 8001700:	0a12      	lsrs	r2, r2, #8
 8001702:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001706:	fb02 f303 	mul.w	r3, r2, r3
 800170a:	617b      	str	r3, [r7, #20]
      break;
 800170c:	e00c      	b.n	8001728 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800170e:	4a13      	ldr	r2, [pc, #76]	@ (800175c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	fbb2 f3f3 	udiv	r3, r2, r3
 8001716:	4a10      	ldr	r2, [pc, #64]	@ (8001758 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001718:	68d2      	ldr	r2, [r2, #12]
 800171a:	0a12      	lsrs	r2, r2, #8
 800171c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001720:	fb02 f303 	mul.w	r3, r2, r3
 8001724:	617b      	str	r3, [r7, #20]
      break;
 8001726:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001728:	4b0b      	ldr	r3, [pc, #44]	@ (8001758 <HAL_RCC_GetSysClockFreq+0xb8>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	0e5b      	lsrs	r3, r3, #25
 800172e:	f003 0303 	and.w	r3, r3, #3
 8001732:	3301      	adds	r3, #1
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	e001      	b.n	8001748 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001744:	2300      	movs	r3, #0
 8001746:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001748:	693b      	ldr	r3, [r7, #16]
}
 800174a:	4618      	mov	r0, r3
 800174c:	371c      	adds	r7, #28
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000
 800175c:	00f42400 	.word	0x00f42400
 8001760:	007a1200 	.word	0x007a1200

08001764 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001764:	b480      	push	{r7}
 8001766:	b087      	sub	sp, #28
 8001768:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800176a:	4b1e      	ldr	r3, [pc, #120]	@ (80017e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001774:	4b1b      	ldr	r3, [pc, #108]	@ (80017e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	091b      	lsrs	r3, r3, #4
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	3301      	adds	r3, #1
 8001780:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	2b03      	cmp	r3, #3
 8001786:	d10c      	bne.n	80017a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001788:	4a17      	ldr	r2, [pc, #92]	@ (80017e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001790:	4a14      	ldr	r2, [pc, #80]	@ (80017e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001792:	68d2      	ldr	r2, [r2, #12]
 8001794:	0a12      	lsrs	r2, r2, #8
 8001796:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800179a:	fb02 f303 	mul.w	r3, r2, r3
 800179e:	617b      	str	r3, [r7, #20]
    break;
 80017a0:	e00c      	b.n	80017bc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017a2:	4a12      	ldr	r2, [pc, #72]	@ (80017ec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017aa:	4a0e      	ldr	r2, [pc, #56]	@ (80017e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017ac:	68d2      	ldr	r2, [r2, #12]
 80017ae:	0a12      	lsrs	r2, r2, #8
 80017b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80017b4:	fb02 f303 	mul.w	r3, r2, r3
 80017b8:	617b      	str	r3, [r7, #20]
    break;
 80017ba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017bc:	4b09      	ldr	r3, [pc, #36]	@ (80017e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	0e5b      	lsrs	r3, r3, #25
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	3301      	adds	r3, #1
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80017d6:	687b      	ldr	r3, [r7, #4]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	371c      	adds	r7, #28
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	40021000 	.word	0x40021000
 80017e8:	007a1200 	.word	0x007a1200
 80017ec:	00f42400 	.word	0x00f42400

080017f0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e049      	b.n	8001896 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d106      	bne.n	800181c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7fe fea4 	bl	8000564 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2202      	movs	r2, #2
 8001820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3304      	adds	r3, #4
 800182c:	4619      	mov	r1, r3
 800182e:	4610      	mov	r0, r2
 8001830:	f000 fb44 	bl	8001ebc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d109      	bne.n	80018c4 <HAL_TIM_OC_Start+0x24>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	bf14      	ite	ne
 80018bc:	2301      	movne	r3, #1
 80018be:	2300      	moveq	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	e03c      	b.n	800193e <HAL_TIM_OC_Start+0x9e>
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	d109      	bne.n	80018de <HAL_TIM_OC_Start+0x3e>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	bf14      	ite	ne
 80018d6:	2301      	movne	r3, #1
 80018d8:	2300      	moveq	r3, #0
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	e02f      	b.n	800193e <HAL_TIM_OC_Start+0x9e>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d109      	bne.n	80018f8 <HAL_TIM_OC_Start+0x58>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	bf14      	ite	ne
 80018f0:	2301      	movne	r3, #1
 80018f2:	2300      	moveq	r3, #0
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	e022      	b.n	800193e <HAL_TIM_OC_Start+0x9e>
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	2b0c      	cmp	r3, #12
 80018fc:	d109      	bne.n	8001912 <HAL_TIM_OC_Start+0x72>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b01      	cmp	r3, #1
 8001908:	bf14      	ite	ne
 800190a:	2301      	movne	r3, #1
 800190c:	2300      	moveq	r3, #0
 800190e:	b2db      	uxtb	r3, r3
 8001910:	e015      	b.n	800193e <HAL_TIM_OC_Start+0x9e>
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	2b10      	cmp	r3, #16
 8001916:	d109      	bne.n	800192c <HAL_TIM_OC_Start+0x8c>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b01      	cmp	r3, #1
 8001922:	bf14      	ite	ne
 8001924:	2301      	movne	r3, #1
 8001926:	2300      	moveq	r3, #0
 8001928:	b2db      	uxtb	r3, r3
 800192a:	e008      	b.n	800193e <HAL_TIM_OC_Start+0x9e>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b01      	cmp	r3, #1
 8001936:	bf14      	ite	ne
 8001938:	2301      	movne	r3, #1
 800193a:	2300      	moveq	r3, #0
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e0a6      	b.n	8001a94 <HAL_TIM_OC_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d104      	bne.n	8001956 <HAL_TIM_OC_Start+0xb6>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2202      	movs	r2, #2
 8001950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001954:	e023      	b.n	800199e <HAL_TIM_OC_Start+0xfe>
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	2b04      	cmp	r3, #4
 800195a:	d104      	bne.n	8001966 <HAL_TIM_OC_Start+0xc6>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2202      	movs	r2, #2
 8001960:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001964:	e01b      	b.n	800199e <HAL_TIM_OC_Start+0xfe>
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	2b08      	cmp	r3, #8
 800196a:	d104      	bne.n	8001976 <HAL_TIM_OC_Start+0xd6>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2202      	movs	r2, #2
 8001970:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001974:	e013      	b.n	800199e <HAL_TIM_OC_Start+0xfe>
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	2b0c      	cmp	r3, #12
 800197a:	d104      	bne.n	8001986 <HAL_TIM_OC_Start+0xe6>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2202      	movs	r2, #2
 8001980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001984:	e00b      	b.n	800199e <HAL_TIM_OC_Start+0xfe>
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	2b10      	cmp	r3, #16
 800198a:	d104      	bne.n	8001996 <HAL_TIM_OC_Start+0xf6>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2202      	movs	r2, #2
 8001990:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001994:	e003      	b.n	800199e <HAL_TIM_OC_Start+0xfe>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2202      	movs	r2, #2
 800199a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2201      	movs	r2, #1
 80019a4:	6839      	ldr	r1, [r7, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 fe66 	bl	8002678 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a3a      	ldr	r2, [pc, #232]	@ (8001a9c <HAL_TIM_OC_Start+0x1fc>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d018      	beq.n	80019e8 <HAL_TIM_OC_Start+0x148>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a39      	ldr	r2, [pc, #228]	@ (8001aa0 <HAL_TIM_OC_Start+0x200>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d013      	beq.n	80019e8 <HAL_TIM_OC_Start+0x148>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a37      	ldr	r2, [pc, #220]	@ (8001aa4 <HAL_TIM_OC_Start+0x204>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d00e      	beq.n	80019e8 <HAL_TIM_OC_Start+0x148>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a36      	ldr	r2, [pc, #216]	@ (8001aa8 <HAL_TIM_OC_Start+0x208>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d009      	beq.n	80019e8 <HAL_TIM_OC_Start+0x148>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a34      	ldr	r2, [pc, #208]	@ (8001aac <HAL_TIM_OC_Start+0x20c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d004      	beq.n	80019e8 <HAL_TIM_OC_Start+0x148>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a33      	ldr	r2, [pc, #204]	@ (8001ab0 <HAL_TIM_OC_Start+0x210>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d101      	bne.n	80019ec <HAL_TIM_OC_Start+0x14c>
 80019e8:	2301      	movs	r3, #1
 80019ea:	e000      	b.n	80019ee <HAL_TIM_OC_Start+0x14e>
 80019ec:	2300      	movs	r3, #0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d007      	beq.n	8001a02 <HAL_TIM_OC_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a00:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a25      	ldr	r2, [pc, #148]	@ (8001a9c <HAL_TIM_OC_Start+0x1fc>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d022      	beq.n	8001a52 <HAL_TIM_OC_Start+0x1b2>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a14:	d01d      	beq.n	8001a52 <HAL_TIM_OC_Start+0x1b2>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a26      	ldr	r2, [pc, #152]	@ (8001ab4 <HAL_TIM_OC_Start+0x214>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d018      	beq.n	8001a52 <HAL_TIM_OC_Start+0x1b2>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a24      	ldr	r2, [pc, #144]	@ (8001ab8 <HAL_TIM_OC_Start+0x218>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d013      	beq.n	8001a52 <HAL_TIM_OC_Start+0x1b2>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a23      	ldr	r2, [pc, #140]	@ (8001abc <HAL_TIM_OC_Start+0x21c>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d00e      	beq.n	8001a52 <HAL_TIM_OC_Start+0x1b2>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a19      	ldr	r2, [pc, #100]	@ (8001aa0 <HAL_TIM_OC_Start+0x200>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d009      	beq.n	8001a52 <HAL_TIM_OC_Start+0x1b2>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a18      	ldr	r2, [pc, #96]	@ (8001aa4 <HAL_TIM_OC_Start+0x204>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d004      	beq.n	8001a52 <HAL_TIM_OC_Start+0x1b2>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a18      	ldr	r2, [pc, #96]	@ (8001ab0 <HAL_TIM_OC_Start+0x210>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d115      	bne.n	8001a7e <HAL_TIM_OC_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	4b19      	ldr	r3, [pc, #100]	@ (8001ac0 <HAL_TIM_OC_Start+0x220>)
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2b06      	cmp	r3, #6
 8001a62:	d015      	beq.n	8001a90 <HAL_TIM_OC_Start+0x1f0>
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a6a:	d011      	beq.n	8001a90 <HAL_TIM_OC_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f042 0201 	orr.w	r2, r2, #1
 8001a7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a7c:	e008      	b.n	8001a90 <HAL_TIM_OC_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f042 0201 	orr.w	r2, r2, #1
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	e000      	b.n	8001a92 <HAL_TIM_OC_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a90:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40012c00 	.word	0x40012c00
 8001aa0:	40013400 	.word	0x40013400
 8001aa4:	40014000 	.word	0x40014000
 8001aa8:	40014400 	.word	0x40014400
 8001aac:	40014800 	.word	0x40014800
 8001ab0:	40015000 	.word	0x40015000
 8001ab4:	40000400 	.word	0x40000400
 8001ab8:	40000800 	.word	0x40000800
 8001abc:	40000c00 	.word	0x40000c00
 8001ac0:	00010007 	.word	0x00010007

08001ac4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d020      	beq.n	8001b28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d01b      	beq.n	8001b28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f06f 0202 	mvn.w	r2, #2
 8001af8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f9b6 	bl	8001e80 <HAL_TIM_IC_CaptureCallback>
 8001b14:	e005      	b.n	8001b22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f9a8 	bl	8001e6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f9b9 	bl	8001e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d020      	beq.n	8001b74 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d01b      	beq.n	8001b74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f06f 0204 	mvn.w	r2, #4
 8001b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2202      	movs	r2, #2
 8001b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f990 	bl	8001e80 <HAL_TIM_IC_CaptureCallback>
 8001b60:	e005      	b.n	8001b6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f982 	bl	8001e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f993 	bl	8001e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d020      	beq.n	8001bc0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d01b      	beq.n	8001bc0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f06f 0208 	mvn.w	r2, #8
 8001b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2204      	movs	r2, #4
 8001b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f96a 	bl	8001e80 <HAL_TIM_IC_CaptureCallback>
 8001bac:	e005      	b.n	8001bba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f95c 	bl	8001e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f96d 	bl	8001e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	f003 0310 	and.w	r3, r3, #16
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d020      	beq.n	8001c0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f003 0310 	and.w	r3, r3, #16
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d01b      	beq.n	8001c0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f06f 0210 	mvn.w	r2, #16
 8001bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2208      	movs	r2, #8
 8001be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f944 	bl	8001e80 <HAL_TIM_IC_CaptureCallback>
 8001bf8:	e005      	b.n	8001c06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f936 	bl	8001e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 f947 	bl	8001e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00c      	beq.n	8001c30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d007      	beq.n	8001c30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f06f 0201 	mvn.w	r2, #1
 8001c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f914 	bl	8001e58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d104      	bne.n	8001c44 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00c      	beq.n	8001c5e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d007      	beq.n	8001c5e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8001c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 fdd3 	bl	8002804 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d00c      	beq.n	8001c82 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d007      	beq.n	8001c82 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 fdcb 	bl	8002818 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d00c      	beq.n	8001ca6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d007      	beq.n	8001ca6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f901 	bl	8001ea8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	f003 0320 	and.w	r3, r3, #32
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00c      	beq.n	8001cca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f003 0320 	and.w	r3, r3, #32
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d007      	beq.n	8001cca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f06f 0220 	mvn.w	r2, #32
 8001cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 fd93 	bl	80027f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00c      	beq.n	8001cee <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d007      	beq.n	8001cee <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8001ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 fd9f 	bl	800282c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d00c      	beq.n	8001d12 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d007      	beq.n	8001d12 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8001d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 fd97 	bl	8002840 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d00c      	beq.n	8001d36 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d007      	beq.n	8001d36 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8001d2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 fd8f 	bl	8002854 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d00c      	beq.n	8001d5a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d007      	beq.n	8001d5a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8001d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 fd87 	bl	8002868 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d70:	2300      	movs	r3, #0
 8001d72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d101      	bne.n	8001d82 <HAL_TIM_OC_ConfigChannel+0x1e>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e066      	b.n	8001e50 <HAL_TIM_OC_ConfigChannel+0xec>
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b14      	cmp	r3, #20
 8001d8e:	d857      	bhi.n	8001e40 <HAL_TIM_OC_ConfigChannel+0xdc>
 8001d90:	a201      	add	r2, pc, #4	@ (adr r2, 8001d98 <HAL_TIM_OC_ConfigChannel+0x34>)
 8001d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d96:	bf00      	nop
 8001d98:	08001ded 	.word	0x08001ded
 8001d9c:	08001e41 	.word	0x08001e41
 8001da0:	08001e41 	.word	0x08001e41
 8001da4:	08001e41 	.word	0x08001e41
 8001da8:	08001dfb 	.word	0x08001dfb
 8001dac:	08001e41 	.word	0x08001e41
 8001db0:	08001e41 	.word	0x08001e41
 8001db4:	08001e41 	.word	0x08001e41
 8001db8:	08001e09 	.word	0x08001e09
 8001dbc:	08001e41 	.word	0x08001e41
 8001dc0:	08001e41 	.word	0x08001e41
 8001dc4:	08001e41 	.word	0x08001e41
 8001dc8:	08001e17 	.word	0x08001e17
 8001dcc:	08001e41 	.word	0x08001e41
 8001dd0:	08001e41 	.word	0x08001e41
 8001dd4:	08001e41 	.word	0x08001e41
 8001dd8:	08001e25 	.word	0x08001e25
 8001ddc:	08001e41 	.word	0x08001e41
 8001de0:	08001e41 	.word	0x08001e41
 8001de4:	08001e41 	.word	0x08001e41
 8001de8:	08001e33 	.word	0x08001e33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68b9      	ldr	r1, [r7, #8]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f000 f916 	bl	8002024 <TIM_OC1_SetConfig>
      break;
 8001df8:	e025      	b.n	8001e46 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68b9      	ldr	r1, [r7, #8]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f000 f9a9 	bl	8002158 <TIM_OC2_SetConfig>
      break;
 8001e06:	e01e      	b.n	8001e46 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 fa36 	bl	8002280 <TIM_OC3_SetConfig>
      break;
 8001e14:	e017      	b.n	8001e46 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68b9      	ldr	r1, [r7, #8]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f000 fac1 	bl	80023a4 <TIM_OC4_SetConfig>
      break;
 8001e22:	e010      	b.n	8001e46 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68b9      	ldr	r1, [r7, #8]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 fb4e 	bl	80024cc <TIM_OC5_SetConfig>
      break;
 8001e30:	e009      	b.n	8001e46 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68b9      	ldr	r1, [r7, #8]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f000 fbb1 	bl	80025a0 <TIM_OC6_SetConfig>
      break;
 8001e3e:	e002      	b.n	8001e46 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	75fb      	strb	r3, [r7, #23]
      break;
 8001e44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a4c      	ldr	r2, [pc, #304]	@ (8002000 <TIM_Base_SetConfig+0x144>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d017      	beq.n	8001f04 <TIM_Base_SetConfig+0x48>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eda:	d013      	beq.n	8001f04 <TIM_Base_SetConfig+0x48>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a49      	ldr	r2, [pc, #292]	@ (8002004 <TIM_Base_SetConfig+0x148>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d00f      	beq.n	8001f04 <TIM_Base_SetConfig+0x48>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a48      	ldr	r2, [pc, #288]	@ (8002008 <TIM_Base_SetConfig+0x14c>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d00b      	beq.n	8001f04 <TIM_Base_SetConfig+0x48>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a47      	ldr	r2, [pc, #284]	@ (800200c <TIM_Base_SetConfig+0x150>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d007      	beq.n	8001f04 <TIM_Base_SetConfig+0x48>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a46      	ldr	r2, [pc, #280]	@ (8002010 <TIM_Base_SetConfig+0x154>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d003      	beq.n	8001f04 <TIM_Base_SetConfig+0x48>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a45      	ldr	r2, [pc, #276]	@ (8002014 <TIM_Base_SetConfig+0x158>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d108      	bne.n	8001f16 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a39      	ldr	r2, [pc, #228]	@ (8002000 <TIM_Base_SetConfig+0x144>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d023      	beq.n	8001f66 <TIM_Base_SetConfig+0xaa>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f24:	d01f      	beq.n	8001f66 <TIM_Base_SetConfig+0xaa>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a36      	ldr	r2, [pc, #216]	@ (8002004 <TIM_Base_SetConfig+0x148>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d01b      	beq.n	8001f66 <TIM_Base_SetConfig+0xaa>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a35      	ldr	r2, [pc, #212]	@ (8002008 <TIM_Base_SetConfig+0x14c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d017      	beq.n	8001f66 <TIM_Base_SetConfig+0xaa>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a34      	ldr	r2, [pc, #208]	@ (800200c <TIM_Base_SetConfig+0x150>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d013      	beq.n	8001f66 <TIM_Base_SetConfig+0xaa>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a33      	ldr	r2, [pc, #204]	@ (8002010 <TIM_Base_SetConfig+0x154>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d00f      	beq.n	8001f66 <TIM_Base_SetConfig+0xaa>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a33      	ldr	r2, [pc, #204]	@ (8002018 <TIM_Base_SetConfig+0x15c>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d00b      	beq.n	8001f66 <TIM_Base_SetConfig+0xaa>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a32      	ldr	r2, [pc, #200]	@ (800201c <TIM_Base_SetConfig+0x160>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d007      	beq.n	8001f66 <TIM_Base_SetConfig+0xaa>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a31      	ldr	r2, [pc, #196]	@ (8002020 <TIM_Base_SetConfig+0x164>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d003      	beq.n	8001f66 <TIM_Base_SetConfig+0xaa>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a2c      	ldr	r2, [pc, #176]	@ (8002014 <TIM_Base_SetConfig+0x158>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d108      	bne.n	8001f78 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a18      	ldr	r2, [pc, #96]	@ (8002000 <TIM_Base_SetConfig+0x144>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d013      	beq.n	8001fcc <TIM_Base_SetConfig+0x110>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a1a      	ldr	r2, [pc, #104]	@ (8002010 <TIM_Base_SetConfig+0x154>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d00f      	beq.n	8001fcc <TIM_Base_SetConfig+0x110>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a1a      	ldr	r2, [pc, #104]	@ (8002018 <TIM_Base_SetConfig+0x15c>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d00b      	beq.n	8001fcc <TIM_Base_SetConfig+0x110>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a19      	ldr	r2, [pc, #100]	@ (800201c <TIM_Base_SetConfig+0x160>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d007      	beq.n	8001fcc <TIM_Base_SetConfig+0x110>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a18      	ldr	r2, [pc, #96]	@ (8002020 <TIM_Base_SetConfig+0x164>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d003      	beq.n	8001fcc <TIM_Base_SetConfig+0x110>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a13      	ldr	r2, [pc, #76]	@ (8002014 <TIM_Base_SetConfig+0x158>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d103      	bne.n	8001fd4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	691a      	ldr	r2, [r3, #16]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d105      	bne.n	8001ff2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	f023 0201 	bic.w	r2, r3, #1
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	611a      	str	r2, [r3, #16]
  }
}
 8001ff2:	bf00      	nop
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40012c00 	.word	0x40012c00
 8002004:	40000400 	.word	0x40000400
 8002008:	40000800 	.word	0x40000800
 800200c:	40000c00 	.word	0x40000c00
 8002010:	40013400 	.word	0x40013400
 8002014:	40015000 	.word	0x40015000
 8002018:	40014000 	.word	0x40014000
 800201c:	40014400 	.word	0x40014400
 8002020:	40014800 	.word	0x40014800

08002024 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002024:	b480      	push	{r7}
 8002026:	b087      	sub	sp, #28
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	f023 0201 	bic.w	r2, r3, #1
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002052:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f023 0303 	bic.w	r3, r3, #3
 800205e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	4313      	orrs	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f023 0302 	bic.w	r3, r3, #2
 8002070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	4313      	orrs	r3, r2
 800207a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a30      	ldr	r2, [pc, #192]	@ (8002140 <TIM_OC1_SetConfig+0x11c>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d013      	beq.n	80020ac <TIM_OC1_SetConfig+0x88>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a2f      	ldr	r2, [pc, #188]	@ (8002144 <TIM_OC1_SetConfig+0x120>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d00f      	beq.n	80020ac <TIM_OC1_SetConfig+0x88>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a2e      	ldr	r2, [pc, #184]	@ (8002148 <TIM_OC1_SetConfig+0x124>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d00b      	beq.n	80020ac <TIM_OC1_SetConfig+0x88>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a2d      	ldr	r2, [pc, #180]	@ (800214c <TIM_OC1_SetConfig+0x128>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d007      	beq.n	80020ac <TIM_OC1_SetConfig+0x88>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a2c      	ldr	r2, [pc, #176]	@ (8002150 <TIM_OC1_SetConfig+0x12c>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d003      	beq.n	80020ac <TIM_OC1_SetConfig+0x88>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a2b      	ldr	r2, [pc, #172]	@ (8002154 <TIM_OC1_SetConfig+0x130>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d10c      	bne.n	80020c6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f023 0308 	bic.w	r3, r3, #8
 80020b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f023 0304 	bic.w	r3, r3, #4
 80020c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002140 <TIM_OC1_SetConfig+0x11c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d013      	beq.n	80020f6 <TIM_OC1_SetConfig+0xd2>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002144 <TIM_OC1_SetConfig+0x120>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d00f      	beq.n	80020f6 <TIM_OC1_SetConfig+0xd2>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002148 <TIM_OC1_SetConfig+0x124>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d00b      	beq.n	80020f6 <TIM_OC1_SetConfig+0xd2>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a1a      	ldr	r2, [pc, #104]	@ (800214c <TIM_OC1_SetConfig+0x128>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d007      	beq.n	80020f6 <TIM_OC1_SetConfig+0xd2>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a19      	ldr	r2, [pc, #100]	@ (8002150 <TIM_OC1_SetConfig+0x12c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d003      	beq.n	80020f6 <TIM_OC1_SetConfig+0xd2>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a18      	ldr	r2, [pc, #96]	@ (8002154 <TIM_OC1_SetConfig+0x130>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d111      	bne.n	800211a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002104:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	4313      	orrs	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	621a      	str	r2, [r3, #32]
}
 8002134:	bf00      	nop
 8002136:	371c      	adds	r7, #28
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	40012c00 	.word	0x40012c00
 8002144:	40013400 	.word	0x40013400
 8002148:	40014000 	.word	0x40014000
 800214c:	40014400 	.word	0x40014400
 8002150:	40014800 	.word	0x40014800
 8002154:	40015000 	.word	0x40015000

08002158 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002158:	b480      	push	{r7}
 800215a:	b087      	sub	sp, #28
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	f023 0210 	bic.w	r2, r3, #16
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002186:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800218a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	021b      	lsls	r3, r3, #8
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	4313      	orrs	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	f023 0320 	bic.w	r3, r3, #32
 80021a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a2c      	ldr	r2, [pc, #176]	@ (8002268 <TIM_OC2_SetConfig+0x110>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d007      	beq.n	80021cc <TIM_OC2_SetConfig+0x74>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a2b      	ldr	r2, [pc, #172]	@ (800226c <TIM_OC2_SetConfig+0x114>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d003      	beq.n	80021cc <TIM_OC2_SetConfig+0x74>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a2a      	ldr	r2, [pc, #168]	@ (8002270 <TIM_OC2_SetConfig+0x118>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d10d      	bne.n	80021e8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80021d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	011b      	lsls	r3, r3, #4
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	4313      	orrs	r3, r2
 80021de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80021e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a1f      	ldr	r2, [pc, #124]	@ (8002268 <TIM_OC2_SetConfig+0x110>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d013      	beq.n	8002218 <TIM_OC2_SetConfig+0xc0>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a1e      	ldr	r2, [pc, #120]	@ (800226c <TIM_OC2_SetConfig+0x114>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d00f      	beq.n	8002218 <TIM_OC2_SetConfig+0xc0>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002274 <TIM_OC2_SetConfig+0x11c>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d00b      	beq.n	8002218 <TIM_OC2_SetConfig+0xc0>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a1d      	ldr	r2, [pc, #116]	@ (8002278 <TIM_OC2_SetConfig+0x120>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d007      	beq.n	8002218 <TIM_OC2_SetConfig+0xc0>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a1c      	ldr	r2, [pc, #112]	@ (800227c <TIM_OC2_SetConfig+0x124>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d003      	beq.n	8002218 <TIM_OC2_SetConfig+0xc0>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a17      	ldr	r2, [pc, #92]	@ (8002270 <TIM_OC2_SetConfig+0x118>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d113      	bne.n	8002240 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800221e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002226:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	4313      	orrs	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	621a      	str	r2, [r3, #32]
}
 800225a:	bf00      	nop
 800225c:	371c      	adds	r7, #28
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40012c00 	.word	0x40012c00
 800226c:	40013400 	.word	0x40013400
 8002270:	40015000 	.word	0x40015000
 8002274:	40014000 	.word	0x40014000
 8002278:	40014400 	.word	0x40014400
 800227c:	40014800 	.word	0x40014800

08002280 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002280:	b480      	push	{r7}
 8002282:	b087      	sub	sp, #28
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f023 0303 	bic.w	r3, r3, #3
 80022ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80022cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	021b      	lsls	r3, r3, #8
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a2b      	ldr	r2, [pc, #172]	@ (800238c <TIM_OC3_SetConfig+0x10c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d007      	beq.n	80022f2 <TIM_OC3_SetConfig+0x72>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a2a      	ldr	r2, [pc, #168]	@ (8002390 <TIM_OC3_SetConfig+0x110>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d003      	beq.n	80022f2 <TIM_OC3_SetConfig+0x72>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a29      	ldr	r2, [pc, #164]	@ (8002394 <TIM_OC3_SetConfig+0x114>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d10d      	bne.n	800230e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80022f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	021b      	lsls	r3, r3, #8
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	4313      	orrs	r3, r2
 8002304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800230c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a1e      	ldr	r2, [pc, #120]	@ (800238c <TIM_OC3_SetConfig+0x10c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d013      	beq.n	800233e <TIM_OC3_SetConfig+0xbe>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a1d      	ldr	r2, [pc, #116]	@ (8002390 <TIM_OC3_SetConfig+0x110>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d00f      	beq.n	800233e <TIM_OC3_SetConfig+0xbe>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a1d      	ldr	r2, [pc, #116]	@ (8002398 <TIM_OC3_SetConfig+0x118>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d00b      	beq.n	800233e <TIM_OC3_SetConfig+0xbe>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a1c      	ldr	r2, [pc, #112]	@ (800239c <TIM_OC3_SetConfig+0x11c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d007      	beq.n	800233e <TIM_OC3_SetConfig+0xbe>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a1b      	ldr	r2, [pc, #108]	@ (80023a0 <TIM_OC3_SetConfig+0x120>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d003      	beq.n	800233e <TIM_OC3_SetConfig+0xbe>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a16      	ldr	r2, [pc, #88]	@ (8002394 <TIM_OC3_SetConfig+0x114>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d113      	bne.n	8002366 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800234c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	011b      	lsls	r3, r3, #4
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	4313      	orrs	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	621a      	str	r2, [r3, #32]
}
 8002380:	bf00      	nop
 8002382:	371c      	adds	r7, #28
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	40012c00 	.word	0x40012c00
 8002390:	40013400 	.word	0x40013400
 8002394:	40015000 	.word	0x40015000
 8002398:	40014000 	.word	0x40014000
 800239c:	40014400 	.word	0x40014400
 80023a0:	40014800 	.word	0x40014800

080023a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b087      	sub	sp, #28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	021b      	lsls	r3, r3, #8
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80023f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	031b      	lsls	r3, r3, #12
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a2c      	ldr	r2, [pc, #176]	@ (80024b4 <TIM_OC4_SetConfig+0x110>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d007      	beq.n	8002418 <TIM_OC4_SetConfig+0x74>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a2b      	ldr	r2, [pc, #172]	@ (80024b8 <TIM_OC4_SetConfig+0x114>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d003      	beq.n	8002418 <TIM_OC4_SetConfig+0x74>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a2a      	ldr	r2, [pc, #168]	@ (80024bc <TIM_OC4_SetConfig+0x118>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d10d      	bne.n	8002434 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800241e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	031b      	lsls	r3, r3, #12
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	4313      	orrs	r3, r2
 800242a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002432:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a1f      	ldr	r2, [pc, #124]	@ (80024b4 <TIM_OC4_SetConfig+0x110>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d013      	beq.n	8002464 <TIM_OC4_SetConfig+0xc0>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a1e      	ldr	r2, [pc, #120]	@ (80024b8 <TIM_OC4_SetConfig+0x114>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d00f      	beq.n	8002464 <TIM_OC4_SetConfig+0xc0>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a1e      	ldr	r2, [pc, #120]	@ (80024c0 <TIM_OC4_SetConfig+0x11c>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d00b      	beq.n	8002464 <TIM_OC4_SetConfig+0xc0>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a1d      	ldr	r2, [pc, #116]	@ (80024c4 <TIM_OC4_SetConfig+0x120>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d007      	beq.n	8002464 <TIM_OC4_SetConfig+0xc0>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a1c      	ldr	r2, [pc, #112]	@ (80024c8 <TIM_OC4_SetConfig+0x124>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d003      	beq.n	8002464 <TIM_OC4_SetConfig+0xc0>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a17      	ldr	r2, [pc, #92]	@ (80024bc <TIM_OC4_SetConfig+0x118>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d113      	bne.n	800248c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800246a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002472:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	019b      	lsls	r3, r3, #6
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	019b      	lsls	r3, r3, #6
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	621a      	str	r2, [r3, #32]
}
 80024a6:	bf00      	nop
 80024a8:	371c      	adds	r7, #28
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	40012c00 	.word	0x40012c00
 80024b8:	40013400 	.word	0x40013400
 80024bc:	40015000 	.word	0x40015000
 80024c0:	40014000 	.word	0x40014000
 80024c4:	40014400 	.word	0x40014400
 80024c8:	40014800 	.word	0x40014800

080024cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b087      	sub	sp, #28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	4313      	orrs	r3, r2
 8002508:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002510:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	041b      	lsls	r3, r3, #16
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	4313      	orrs	r3, r2
 800251c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a19      	ldr	r2, [pc, #100]	@ (8002588 <TIM_OC5_SetConfig+0xbc>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d013      	beq.n	800254e <TIM_OC5_SetConfig+0x82>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a18      	ldr	r2, [pc, #96]	@ (800258c <TIM_OC5_SetConfig+0xc0>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d00f      	beq.n	800254e <TIM_OC5_SetConfig+0x82>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a17      	ldr	r2, [pc, #92]	@ (8002590 <TIM_OC5_SetConfig+0xc4>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d00b      	beq.n	800254e <TIM_OC5_SetConfig+0x82>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a16      	ldr	r2, [pc, #88]	@ (8002594 <TIM_OC5_SetConfig+0xc8>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d007      	beq.n	800254e <TIM_OC5_SetConfig+0x82>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a15      	ldr	r2, [pc, #84]	@ (8002598 <TIM_OC5_SetConfig+0xcc>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d003      	beq.n	800254e <TIM_OC5_SetConfig+0x82>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a14      	ldr	r2, [pc, #80]	@ (800259c <TIM_OC5_SetConfig+0xd0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d109      	bne.n	8002562 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002554:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	021b      	lsls	r3, r3, #8
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	4313      	orrs	r3, r2
 8002560:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	621a      	str	r2, [r3, #32]
}
 800257c:	bf00      	nop
 800257e:	371c      	adds	r7, #28
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	40012c00 	.word	0x40012c00
 800258c:	40013400 	.word	0x40013400
 8002590:	40014000 	.word	0x40014000
 8002594:	40014400 	.word	0x40014400
 8002598:	40014800 	.word	0x40014800
 800259c:	40015000 	.word	0x40015000

080025a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b087      	sub	sp, #28
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	021b      	lsls	r3, r3, #8
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	4313      	orrs	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80025e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	051b      	lsls	r3, r3, #20
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a1a      	ldr	r2, [pc, #104]	@ (8002660 <TIM_OC6_SetConfig+0xc0>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d013      	beq.n	8002624 <TIM_OC6_SetConfig+0x84>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a19      	ldr	r2, [pc, #100]	@ (8002664 <TIM_OC6_SetConfig+0xc4>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d00f      	beq.n	8002624 <TIM_OC6_SetConfig+0x84>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a18      	ldr	r2, [pc, #96]	@ (8002668 <TIM_OC6_SetConfig+0xc8>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d00b      	beq.n	8002624 <TIM_OC6_SetConfig+0x84>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a17      	ldr	r2, [pc, #92]	@ (800266c <TIM_OC6_SetConfig+0xcc>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d007      	beq.n	8002624 <TIM_OC6_SetConfig+0x84>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a16      	ldr	r2, [pc, #88]	@ (8002670 <TIM_OC6_SetConfig+0xd0>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d003      	beq.n	8002624 <TIM_OC6_SetConfig+0x84>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a15      	ldr	r2, [pc, #84]	@ (8002674 <TIM_OC6_SetConfig+0xd4>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d109      	bne.n	8002638 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800262a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	029b      	lsls	r3, r3, #10
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	4313      	orrs	r3, r2
 8002636:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	621a      	str	r2, [r3, #32]
}
 8002652:	bf00      	nop
 8002654:	371c      	adds	r7, #28
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	40012c00 	.word	0x40012c00
 8002664:	40013400 	.word	0x40013400
 8002668:	40014000 	.word	0x40014000
 800266c:	40014400 	.word	0x40014400
 8002670:	40014800 	.word	0x40014800
 8002674:	40015000 	.word	0x40015000

08002678 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002678:	b480      	push	{r7}
 800267a:	b087      	sub	sp, #28
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	f003 031f 	and.w	r3, r3, #31
 800268a:	2201      	movs	r2, #1
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6a1a      	ldr	r2, [r3, #32]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	43db      	mvns	r3, r3
 800269a:	401a      	ands	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6a1a      	ldr	r2, [r3, #32]
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	f003 031f 	and.w	r3, r3, #31
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	fa01 f303 	lsl.w	r3, r1, r3
 80026b0:	431a      	orrs	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	621a      	str	r2, [r3, #32]
}
 80026b6:	bf00      	nop
 80026b8:	371c      	adds	r7, #28
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
	...

080026c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d101      	bne.n	80026dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026d8:	2302      	movs	r3, #2
 80026da:	e074      	b.n	80027c6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2202      	movs	r2, #2
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a34      	ldr	r2, [pc, #208]	@ (80027d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d009      	beq.n	800271a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a33      	ldr	r2, [pc, #204]	@ (80027d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d004      	beq.n	800271a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a31      	ldr	r2, [pc, #196]	@ (80027dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d108      	bne.n	800272c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002720:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	4313      	orrs	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8002732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002736:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	4313      	orrs	r3, r2
 8002740:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a21      	ldr	r2, [pc, #132]	@ (80027d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d022      	beq.n	800279a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800275c:	d01d      	beq.n	800279a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a1f      	ldr	r2, [pc, #124]	@ (80027e0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d018      	beq.n	800279a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a1d      	ldr	r2, [pc, #116]	@ (80027e4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d013      	beq.n	800279a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a1c      	ldr	r2, [pc, #112]	@ (80027e8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d00e      	beq.n	800279a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a15      	ldr	r2, [pc, #84]	@ (80027d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d009      	beq.n	800279a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a18      	ldr	r2, [pc, #96]	@ (80027ec <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d004      	beq.n	800279a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a11      	ldr	r2, [pc, #68]	@ (80027dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d10c      	bne.n	80027b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40012c00 	.word	0x40012c00
 80027d8:	40013400 	.word	0x40013400
 80027dc:	40015000 	.word	0x40015000
 80027e0:	40000400 	.word	0x40000400
 80027e4:	40000800 	.word	0x40000800
 80027e8:	40000c00 	.word	0x40000c00
 80027ec:	40014000 	.word	0x40014000

080027f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <memset>:
 800287c:	4402      	add	r2, r0
 800287e:	4603      	mov	r3, r0
 8002880:	4293      	cmp	r3, r2
 8002882:	d100      	bne.n	8002886 <memset+0xa>
 8002884:	4770      	bx	lr
 8002886:	f803 1b01 	strb.w	r1, [r3], #1
 800288a:	e7f9      	b.n	8002880 <memset+0x4>

0800288c <__libc_init_array>:
 800288c:	b570      	push	{r4, r5, r6, lr}
 800288e:	4d0d      	ldr	r5, [pc, #52]	@ (80028c4 <__libc_init_array+0x38>)
 8002890:	4c0d      	ldr	r4, [pc, #52]	@ (80028c8 <__libc_init_array+0x3c>)
 8002892:	1b64      	subs	r4, r4, r5
 8002894:	10a4      	asrs	r4, r4, #2
 8002896:	2600      	movs	r6, #0
 8002898:	42a6      	cmp	r6, r4
 800289a:	d109      	bne.n	80028b0 <__libc_init_array+0x24>
 800289c:	4d0b      	ldr	r5, [pc, #44]	@ (80028cc <__libc_init_array+0x40>)
 800289e:	4c0c      	ldr	r4, [pc, #48]	@ (80028d0 <__libc_init_array+0x44>)
 80028a0:	f000 f818 	bl	80028d4 <_init>
 80028a4:	1b64      	subs	r4, r4, r5
 80028a6:	10a4      	asrs	r4, r4, #2
 80028a8:	2600      	movs	r6, #0
 80028aa:	42a6      	cmp	r6, r4
 80028ac:	d105      	bne.n	80028ba <__libc_init_array+0x2e>
 80028ae:	bd70      	pop	{r4, r5, r6, pc}
 80028b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80028b4:	4798      	blx	r3
 80028b6:	3601      	adds	r6, #1
 80028b8:	e7ee      	b.n	8002898 <__libc_init_array+0xc>
 80028ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80028be:	4798      	blx	r3
 80028c0:	3601      	adds	r6, #1
 80028c2:	e7f2      	b.n	80028aa <__libc_init_array+0x1e>
 80028c4:	080028fc 	.word	0x080028fc
 80028c8:	080028fc 	.word	0x080028fc
 80028cc:	080028fc 	.word	0x080028fc
 80028d0:	08002900 	.word	0x08002900

080028d4 <_init>:
 80028d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028d6:	bf00      	nop
 80028d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028da:	bc08      	pop	{r3}
 80028dc:	469e      	mov	lr, r3
 80028de:	4770      	bx	lr

080028e0 <_fini>:
 80028e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028e2:	bf00      	nop
 80028e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028e6:	bc08      	pop	{r3}
 80028e8:	469e      	mov	lr, r3
 80028ea:	4770      	bx	lr
